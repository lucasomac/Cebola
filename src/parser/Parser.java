/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser;

import lexer.*;
import node.*;
import analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PCebola node1 = (PCebola) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAcebola1Cebola */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAcebola2Cebola */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AAcebola3Cebola */
            {
                ArrayList<Object> list = new2();
                push(goTo(0), list);
            }
            break;
            case 3: /* reduce AAcebola4Cebola */
            {
                ArrayList<Object> list = new3();
                push(goTo(0), list);
            }
            break;
            case 4: /* reduce AAvariaveldeclvar1DeclVar */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list);
            }
            break;
            case 5: /* reduce AAvariaveldeclvar2DeclVar */
            {
                ArrayList<Object> list = new5();
                push(goTo(1), list);
            }
            break;
            case 6: /* reduce ADconstanteDeclVar */
            {
                ArrayList<Object> list = new6();
                push(goTo(1), list);
            }
            break;
            case 7: /* reduce ADeclVarVirg */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list);
            }
            break;
            case 8: /* reduce ASimplesVarld */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list);
            }
            break;
            case 9: /* reduce AVetorVarld */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list);
            }
            break;
            case 10: /* reduce ACaractereTipo */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list);
            }
            break;
            case 11: /* reduce AInteiroTipo */
            {
                ArrayList<Object> list = new11();
                push(goTo(4), list);
            }
            break;
            case 12: /* reduce ARealTipo */
            {
                ArrayList<Object> list = new12();
                push(goTo(4), list);
            }
            break;
            case 13: /* reduce AStringValor */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list);
            }
            break;
            case 14: /* reduce ANumeroValor */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list);
            }
            break;
            case 15: /* reduce ARealValor */
            {
                ArrayList<Object> list = new15();
                push(goTo(5), list);
            }
            break;
            case 16: /* reduce ANumericoExp */
            {
                ArrayList<Object> list = new16();
                push(goTo(6), list);
            }
            break;
            case 17: /* reduce ALogicaExp */
            {
                ArrayList<Object> list = new17();
                push(goTo(6), list);
            }
            break;
            case 18: /* reduce ABaixaExpnum */
            {
                ArrayList<Object> list = new18();
                push(goTo(7), list);
            }
            break;
            case 19: /* reduce ATermoExpnum */
            {
                ArrayList<Object> list = new19();
                push(goTo(7), list);
            }
            break;
            case 20: /* reduce AAddSoma */
            {
                ArrayList<Object> list = new20();
                push(goTo(8), list);
            }
            break;
            case 21: /* reduce ASubSoma */
            {
                ArrayList<Object> list = new21();
                push(goTo(8), list);
            }
            break;
            case 22: /* reduce AAltaTermo */
            {
                ArrayList<Object> list = new22();
                push(goTo(9), list);
            }
            break;
            case 23: /* reduce AFatorTermo */
            {
                ArrayList<Object> list = new23();
                push(goTo(9), list);
            }
            break;
            case 24: /* reduce AMultMult */
            {
                ArrayList<Object> list = new24();
                push(goTo(10), list);
            }
            break;
            case 25: /* reduce ADivMult */
            {
                ArrayList<Object> list = new25();
                push(goTo(10), list);
            }
            break;
            case 26: /* reduce AInternoFator */
            {
                ArrayList<Object> list = new26();
                push(goTo(11), list);
            }
            break;
            case 27: /* reduce ANegativoFator */
            {
                ArrayList<Object> list = new27();
                push(goTo(11), list);
            }
            break;
            case 28: /* reduce ANumeroFator */
            {
                ArrayList<Object> list = new28();
                push(goTo(11), list);
            }
            break;
            case 29: /* reduce ARealFator */
            {
                ArrayList<Object> list = new29();
                push(goTo(11), list);
            }
            break;
            case 30: /* reduce AVariavelFator */
            {
                ArrayList<Object> list = new30();
                push(goTo(11), list);
            }
            break;
            case 31: /* reduce AMenorigParabool */
            {
                ArrayList<Object> list = new31();
                push(goTo(12), list);
            }
            break;
            case 32: /* reduce AMaiorigParabool */
            {
                ArrayList<Object> list = new32();
                push(goTo(12), list);
            }
            break;
            case 33: /* reduce AMenorParabool */
            {
                ArrayList<Object> list = new33();
                push(goTo(12), list);
            }
            break;
            case 34: /* reduce AMaiorParabool */
            {
                ArrayList<Object> list = new34();
                push(goTo(12), list);
            }
            break;
            case 35: /* reduce AIgualLcomp */
            {
                ArrayList<Object> list = new35();
                push(goTo(13), list);
            }
            break;
            case 36: /* reduce ADiffLcomp */
            {
                ArrayList<Object> list = new36();
                push(goTo(13), list);
            }
            break;
            case 37: /* reduce ALsoma */
            {
                ArrayList<Object> list = new37();
                push(goTo(14), list);
            }
            break;
            case 38: /* reduce ALmult */
            {
                ArrayList<Object> list = new38();
                push(goTo(15), list);
            }
            break;
            case 39: /* reduce ALxor */
            {
                ArrayList<Object> list = new39();
                push(goTo(16), list);
            }
            break;
            case 40: /* reduce AConjuntoExpLogica */
            {
                ArrayList<Object> list = new40();
                push(goTo(17), list);
            }
            break;
            case 41: /* reduce ADiretoExpLogica */
            {
                ArrayList<Object> list = new41();
                push(goTo(17), list);
            }
            break;
            case 42: /* reduce AParentesesNaoigualfator */
            {
                ArrayList<Object> list = new42();
                push(goTo(18), list);
            }
            break;
            case 43: /* reduce AExpNaoigualfator */
            {
                ArrayList<Object> list = new43();
                push(goTo(18), list);
            }
            break;
            case 44: /* reduce ANaoNaoigualfator */
            {
                ArrayList<Object> list = new44();
                push(goTo(18), list);
            }
            break;
            case 45: /* reduce ACadeiaLini */
            {
                ArrayList<Object> list = new45();
                push(goTo(19), list);
            }
            break;
            case 46: /* reduce ASimplesLini */
            {
                ArrayList<Object> list = new46();
                push(goTo(19), list);
            }
            break;
            case 47: /* reduce ACadeiaLmeio */
            {
                ArrayList<Object> list = new47();
                push(goTo(20), list);
            }
            break;
            case 48: /* reduce ASimplesLmeio */
            {
                ArrayList<Object> list = new48();
                push(goTo(20), list);
            }
            break;
            case 49: /* reduce ACadeiaLtermo */
            {
                ArrayList<Object> list = new49();
                push(goTo(21), list);
            }
            break;
            case 50: /* reduce ASimplesLtermo */
            {
                ArrayList<Object> list = new50();
                push(goTo(21), list);
            }
            break;
            case 51: /* reduce AParentesesLfator */
            {
                ArrayList<Object> list = new51();
                push(goTo(22), list);
            }
            break;
            case 52: /* reduce AExpLfator */
            {
                ArrayList<Object> list = new52();
                push(goTo(22), list);
            }
            break;
            case 53: /* reduce AExpigLfator */
            {
                ArrayList<Object> list = new53();
                push(goTo(22), list);
            }
            break;
            case 54: /* reduce ANaoLfator */
            {
                ArrayList<Object> list = new54();
                push(goTo(22), list);
            }
            break;
            case 55: /* reduce AIdVar */
            {
                ArrayList<Object> list = new55();
                push(goTo(23), list);
            }
            break;
            case 56: /* reduce AVetorVar */
            {
                ArrayList<Object> list = new56();
                push(goTo(23), list);
            }
            break;
            case 57: /* reduce ALeiaComando */
            {
                ArrayList<Object> list = new57();
                push(goTo(24), list);
            }
            break;
            case 58: /* reduce ARepitaComando */
            {
                ArrayList<Object> list = new58();
                push(goTo(24), list);
            }
            break;
            case 59: /* reduce AEnquantoComando */
            {
                ArrayList<Object> list = new59();
                push(goTo(24), list);
            }
            break;
            case 60: /* reduce AAvaliarComando */
            {
                ArrayList<Object> list = new60();
                push(goTo(24), list);
            }
            break;
            case 61: /* reduce AEscritaComando */
            {
                ArrayList<Object> list = new61();
                push(goTo(24), list);
            }
            break;
            case 62: /* reduce ASeComando */
            {
                ArrayList<Object> list = new62();
                push(goTo(24), list);
            }
            break;
            case 63: /* reduce AAtribuicaoComando */
            {
                ArrayList<Object> list = new63();
                push(goTo(24), list);
            }
            break;
            case 64: /* reduce AParaComando */
            {
                ArrayList<Object> list = new64();
                push(goTo(24), list);
            }
            break;
            case 65: /* reduce ASeComandoSe */
            {
                ArrayList<Object> list = new65();
                push(goTo(25), list);
            }
            break;
            case 66: /* reduce ASeNaoComandoSe */
            {
                ArrayList<Object> list = new66();
                push(goTo(25), list);
            }
            break;
            case 67: /* reduce AComandoRepita */
            {
                ArrayList<Object> list = new67();
                push(goTo(26), list);
            }
            break;
            case 68: /* reduce AComandoEnquanto */
            {
                ArrayList<Object> list = new68();
                push(goTo(27), list);
            }
            break;
            case 69: /* reduce ACasos */
            {
                ArrayList<Object> list = new69();
                push(goTo(28), list);
            }
            break;
            case 70: /* reduce ANormalComandoAvalie */
            {
                ArrayList<Object> list = new70();
                push(goTo(29), list);
            }
            break;
            case 71: /* reduce ASenaoComandoAvalie */
            {
                ArrayList<Object> list = new71();
                push(goTo(29), list);
            }
            break;
            case 72: /* reduce ANumTipospara */
            {
                ArrayList<Object> list = new72();
                push(goTo(30), list);
            }
            break;
            case 73: /* reduce AVarTipospara */
            {
                ArrayList<Object> list = new73();
                push(goTo(30), list);
            }
            break;
            case 74: /* reduce ASempassoComandoPara */
            {
                ArrayList<Object> list = new74();
                push(goTo(31), list);
            }
            break;
            case 75: /* reduce ACompassoComandoPara */
            {
                ArrayList<Object> list = new75();
                push(goTo(31), list);
            }
            break;
            case 76: /* reduce ANormalComandoEscrita */
            {
                ArrayList<Object> list = new76();
                push(goTo(32), list);
            }
            break;
            case 77: /* reduce AStrComandoEscrita */
            {
                ArrayList<Object> list = new77();
                push(goTo(32), list);
            }
            break;
            case 78: /* reduce AAcomandoleia1ComandoLeia */
            {
                ArrayList<Object> list = new78();
                push(goTo(33), list);
            }
            break;
            case 79: /* reduce AAcomandoleia2ComandoLeia */
            {
                ArrayList<Object> list = new79();
                push(goTo(33), list);
            }
            break;
            case 80: /* reduce AVariosLeia */
            {
                ArrayList<Object> list = new80();
                push(goTo(34), list);
            }
            break;
            case 81: /* reduce AComandoAtribuicao */
            {
                ArrayList<Object> list = new81();
                push(goTo(35), list);
            }
            break;
            case 82: /* reduce ATerminal$DeclVar */
            {
                ArrayList<Object> list = new82();
                push(goTo(36), list);
            }
            break;
            case 83: /* reduce ANonTerminal$DeclVar */
            {
                ArrayList<Object> list = new83();
                push(goTo(36), list);
            }
            break;
            case 84: /* reduce ATerminal$Comando */
            {
                ArrayList<Object> list = new84();
                push(goTo(37), list);
            }
            break;
            case 85: /* reduce ANonTerminal$Comando */
            {
                ArrayList<Object> list = new85();
                push(goTo(37), list);
            }
            break;
            case 86: /* reduce ATerminal$DeclVarVirg */
            {
                ArrayList<Object> list = new86();
                push(goTo(38), list);
            }
            break;
            case 87: /* reduce ANonTerminal$DeclVarVirg */
            {
                ArrayList<Object> list = new87();
                push(goTo(38), list);
            }
            break;
            case 88: /* reduce ATerminal$Casos */
            {
                ArrayList<Object> list = new88();
                push(goTo(39), list);
            }
            break;
            case 89: /* reduce ANonTerminal$Casos */
            {
                ArrayList<Object> list = new89();
                push(goTo(39), list);
            }
            break;
            case 90: /* reduce ATerminal$VariosLeia */
            {
                ArrayList<Object> list = new90();
                push(goTo(40), list);
            }
            break;
            case 91: /* reduce ANonTerminal$VariosLeia */
            {
                ArrayList<Object> list = new91();
                push(goTo(40), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAcebola1Cebola */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCebola pcebolaNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentificadorNode2 = (TIdentificador)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        }

        pcebolaNode1 = new ACebola(tidentificadorNode2, listNode3, listNode4);
        }
	nodeList.add(pcebolaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAcebola2Cebola */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCebola pcebolaNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidentificadorNode2 = (TIdentificador)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }

        pcebolaNode1 = new ACebola(tidentificadorNode2, listNode4, listNode5);
        }
	nodeList.add(pcebolaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAcebola3Cebola */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCebola pcebolaNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidentificadorNode2 = (TIdentificador)nodeArrayList2.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList4.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pcebolaNode1 = new ACebola(tidentificadorNode2, listNode3, listNode5);
        }
	nodeList.add(pcebolaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAcebola4Cebola */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCebola pcebolaNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidentificadorNode2 = (TIdentificador)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList5.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pcebolaNode1 = new ACebola(tidentificadorNode2, listNode4, listNode6);
        }
	nodeList.add(pcebolaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAvariaveldeclvar1DeclVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclVar pdeclvarNode1;
        {
            // Block
        PTipo ptipoNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PVarld pvarldNode4;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        {
            // Block
        }
        pvarldNode4 = (PVarld)nodeArrayList3.get(0);

        pdeclvarNode1 = new AVariavelDeclVar(ptipoNode2, listNode3, pvarldNode4);
        }
	nodeList.add(pdeclvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAvariaveldeclvar2DeclVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclVar pdeclvarNode1;
        {
            // Block
        PTipo ptipoNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PVarld pvarldNode5;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pvarldNode5 = (PVarld)nodeArrayList4.get(0);

        pdeclvarNode1 = new AVariavelDeclVar(ptipoNode2, listNode4, pvarldNode5);
        }
	nodeList.add(pdeclvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ADconstanteDeclVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclVar pdeclvarNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        PValor pvalorNode3;
        tidentificadorNode2 = (TIdentificador)nodeArrayList2.get(0);
        pvalorNode3 = (PValor)nodeArrayList3.get(0);

        pdeclvarNode1 = new ADconstanteDeclVar(tidentificadorNode2, pvalorNode3);
        }
	nodeList.add(pdeclvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ADeclVarVirg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarld pvarldNode1;
        pvarldNode1 = (PVarld)nodeArrayList1.get(0);
	nodeList.add(pvarldNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ASimplesVarld */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarld pvarldNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);

        pvarldNode1 = new ASimplesVarld(tidentificadorNode2);
        }
	nodeList.add(pvarldNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AVetorVarld */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarld pvarldNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        TNumero tnumeroNode3;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);
        tnumeroNode3 = (TNumero)nodeArrayList3.get(0);

        pvarldNode1 = new AVetorVarld(tidentificadorNode2, tnumeroNode3);
        }
	nodeList.add(pvarldNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ACaractereTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TCaractere tcaractereNode2;
        tcaractereNode2 = (TCaractere)nodeArrayList1.get(0);

        ptipoNode1 = new ACaractereTipo(tcaractereNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AInteiroTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TInteiro tinteiroNode2;
        tinteiroNode2 = (TInteiro)nodeArrayList1.get(0);

        ptipoNode1 = new AInteiroTipo(tinteiroNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ARealTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        ptipoNode1 = new ARealTipo(trealNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AStringValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pvalorNode1 = new AStringValor(tstringNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ANumeroValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNumero tnumeroNode2;
        tnumeroNode2 = (TNumero)nodeArrayList1.get(0);

        pvalorNode1 = new ANumeroValor(tnumeroNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ARealValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNumeroReal tnumerorealNode2;
        tnumerorealNode2 = (TNumeroReal)nodeArrayList1.get(0);

        pvalorNode1 = new ARealValor(tnumerorealNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ANumericoExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ALogicaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ABaixaExpnum */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        POperacao poperacaoNode3;
        PExp pexpNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        poperacaoNode3 = (POperacao)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AOperacaoExp(pexpNode2, poperacaoNode3, pexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ATermoExpnum */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAddSoma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperacao poperacaoNode1;
        {
            // Block
        TMais tmaisNode2;
        tmaisNode2 = (TMais)nodeArrayList1.get(0);

        poperacaoNode1 = new AAddOperacao(tmaisNode2);
        }
	nodeList.add(poperacaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ASubSoma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperacao poperacaoNode1;
        {
            // Block
        TMenos tmenosNode2;
        tmenosNode2 = (TMenos)nodeArrayList1.get(0);

        poperacaoNode1 = new ASubOperacao(tmenosNode2);
        }
	nodeList.add(poperacaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AAltaTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        POperacao poperacaoNode3;
        PExp pexpNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        poperacaoNode3 = (POperacao)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AOperacaoExp(pexpNode2, poperacaoNode3, pexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AFatorTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AMultMult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperacao poperacaoNode1;
        {
            // Block
        TVezes tvezesNode2;
        tvezesNode2 = (TVezes)nodeArrayList1.get(0);

        poperacaoNode1 = new AMultOperacao(tvezesNode2);
        }
	nodeList.add(poperacaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ADivMult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperacao poperacaoNode1;
        {
            // Block
        TDivisao tdivisaoNode2;
        tdivisaoNode2 = (TDivisao)nodeArrayList1.get(0);

        poperacaoNode1 = new ADivOperacao(tdivisaoNode2);
        }
	nodeList.add(poperacaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AInternoFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new AInternoExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ANegativoFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TMenos tmenosNode2;
        PExp pexpNode3;
        tmenosNode2 = (TMenos)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ANegativoExp(tmenosNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ANumeroFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TNumero tnumeroNode2;
        tnumeroNode2 = (TNumero)nodeArrayList1.get(0);

        pexpNode1 = new ANumeroExp(tnumeroNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ARealFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TNumeroReal tnumerorealNode2;
        tnumerorealNode2 = (TNumeroReal)nodeArrayList1.get(0);

        pexpNode1 = new ARealExp(tnumerorealNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AVariavelFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pexpNode1 = new AVariavelExp(pvarNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AMenorigParabool */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperacaologica poperacaologicaNode1;
        {
            // Block
        TMenorigual tmenorigualNode2;
        tmenorigualNode2 = (TMenorigual)nodeArrayList1.get(0);

        poperacaologicaNode1 = new AMenorigOperacaologica(tmenorigualNode2);
        }
	nodeList.add(poperacaologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AMaiorigParabool */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperacaologica poperacaologicaNode1;
        {
            // Block
        TMaiorigual tmaiorigualNode2;
        tmaiorigualNode2 = (TMaiorigual)nodeArrayList1.get(0);

        poperacaologicaNode1 = new AMaiorigOperacaologica(tmaiorigualNode2);
        }
	nodeList.add(poperacaologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AMenorParabool */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperacaologica poperacaologicaNode1;
        {
            // Block
        TMenorq tmenorqNode2;
        tmenorqNode2 = (TMenorq)nodeArrayList1.get(0);

        poperacaologicaNode1 = new AMenorOperacaologica(tmenorqNode2);
        }
	nodeList.add(poperacaologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AMaiorParabool */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperacaologica poperacaologicaNode1;
        {
            // Block
        TMaiorq tmaiorqNode2;
        tmaiorqNode2 = (TMaiorq)nodeArrayList1.get(0);

        poperacaologicaNode1 = new AMaiorOperacaologica(tmaiorqNode2);
        }
	nodeList.add(poperacaologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AIgualLcomp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperacaologica poperacaologicaNode1;
        {
            // Block
        TIgual tigualNode2;
        tigualNode2 = (TIgual)nodeArrayList1.get(0);

        poperacaologicaNode1 = new AIgualOperacaologica(tigualNode2);
        }
	nodeList.add(poperacaologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ADiffLcomp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperacaologica poperacaologicaNode1;
        {
            // Block
        TDiferente tdiferenteNode2;
        tdiferenteNode2 = (TDiferente)nodeArrayList1.get(0);

        poperacaologicaNode1 = new ADiffOperacaologica(tdiferenteNode2);
        }
	nodeList.add(poperacaologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ALsoma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperacaologica poperacaologicaNode1;
        {
            // Block
        TOu touNode2;
        touNode2 = (TOu)nodeArrayList1.get(0);

        poperacaologicaNode1 = new AOuOperacaologica(touNode2);
        }
	nodeList.add(poperacaologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ALmult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperacaologica poperacaologicaNode1;
        {
            // Block
        TE teNode2;
        teNode2 = (TE)nodeArrayList1.get(0);

        poperacaologicaNode1 = new AEOperacaologica(teNode2);
        }
	nodeList.add(poperacaologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ALxor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POperacaologica poperacaologicaNode1;
        {
            // Block
        TXor txorNode2;
        txorNode2 = (TXor)nodeArrayList1.get(0);

        poperacaologicaNode1 = new AXorOperacaologica(txorNode2);
        }
	nodeList.add(poperacaologicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AConjuntoExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        POperacaologica poperacaologicaNode3;
        PExp pexpNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        poperacaologicaNode3 = (POperacaologica)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AOperacaologicaExp(pexpNode2, poperacaologicaNode3, pexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ADiretoExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AParentesesNaoigualfator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new AInternoExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AExpNaoigualfator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        POperacaologica poperacaologicaNode3;
        PExp pexpNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        poperacaologicaNode3 = (POperacaologica)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AOperacaologicaExp(pexpNode2, poperacaologicaNode3, pexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ANaoNaoigualfator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TNao tnaoNode2;
        PExp pexpNode3;
        tnaoNode2 = (TNao)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ANegadoExp(tnaoNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ACadeiaLini */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        POperacaologica poperacaologicaNode3;
        PExp pexpNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        poperacaologicaNode3 = (POperacaologica)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AOperacaologicaExp(pexpNode2, poperacaologicaNode3, pexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ASimplesLini */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ACadeiaLmeio */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        POperacaologica poperacaologicaNode3;
        PExp pexpNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        poperacaologicaNode3 = (POperacaologica)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AOperacaologicaExp(pexpNode2, poperacaologicaNode3, pexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ASimplesLmeio */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ACadeiaLtermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        POperacaologica poperacaologicaNode3;
        PExp pexpNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        poperacaologicaNode3 = (POperacaologica)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AOperacaologicaExp(pexpNode2, poperacaologicaNode3, pexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ASimplesLtermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        pexpNode1 = (PExp)nodeArrayList1.get(0);
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AParentesesLfator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new AInternoExp(pexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AExpLfator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        POperacaologica poperacaologicaNode3;
        PExp pexpNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        poperacaologicaNode3 = (POperacaologica)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AOperacaologicaExp(pexpNode2, poperacaologicaNode3, pexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AExpigLfator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        POperacaologica poperacaologicaNode3;
        PExp pexpNode4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        poperacaologicaNode3 = (POperacaologica)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pexpNode1 = new AOperacaologicaExp(pexpNode2, poperacaologicaNode3, pexpNode4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ANaoLfator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TNao tnaoNode2;
        PExp pexpNode3;
        tnaoNode2 = (TNao)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ANegadoExp(tnaoNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AIdVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);

        pvarNode1 = new AIdVar(tidentificadorNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AVetorVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TIdentificador tidentificadorNode2;
        PExp pexpNode3;
        tidentificadorNode2 = (TIdentificador)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pvarNode1 = new AVetorVar(tidentificadorNode2, pexpNode3);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ALeiaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PComandoLeia pcomandoleiaNode2;
        pcomandoleiaNode2 = (PComandoLeia)nodeArrayList1.get(0);

        pcomandoNode1 = new ALeiaComando(pcomandoleiaNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ARepitaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PComandoRepita pcomandorepitaNode2;
        pcomandorepitaNode2 = (PComandoRepita)nodeArrayList1.get(0);

        pcomandoNode1 = new ARepitaComando(pcomandorepitaNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AEnquantoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PComandoEnquanto pcomandoenquantoNode2;
        pcomandoenquantoNode2 = (PComandoEnquanto)nodeArrayList1.get(0);

        pcomandoNode1 = new AEnquantoComando(pcomandoenquantoNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AAvaliarComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PComandoAvalie pcomandoavalieNode2;
        pcomandoavalieNode2 = (PComandoAvalie)nodeArrayList1.get(0);

        pcomandoNode1 = new AAvaliarComando(pcomandoavalieNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AEscritaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PComandoEscrita pcomandoescritaNode2;
        pcomandoescritaNode2 = (PComandoEscrita)nodeArrayList1.get(0);

        pcomandoNode1 = new AEscritaComando(pcomandoescritaNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ASeComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PComandoSe pcomandoseNode2;
        pcomandoseNode2 = (PComandoSe)nodeArrayList1.get(0);

        pcomandoNode1 = new ASeComando(pcomandoseNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AAtribuicaoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PComandoAtribuicao pcomandoatribuicaoNode2;
        pcomandoatribuicaoNode2 = (PComandoAtribuicao)nodeArrayList1.get(0);

        pcomandoNode1 = new AAtribuicaoComando(pcomandoatribuicaoNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AParaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PComandoPara pcomandoparaNode2;
        pcomandoparaNode2 = (PComandoPara)nodeArrayList1.get(0);

        pcomandoNode1 = new AParaComando(pcomandoparaNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ASeComandoSe */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoSe pcomandoseNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList6.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcomandoseNode1 = new ASeComandoSe(pexpNode2, listNode4);
        }
	nodeList.add(pcomandoseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ASeNaoComandoSe */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoSe pcomandoseNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList6.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList8.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pcomandoseNode1 = new ASeNaoComandoSe(pexpNode2, listNode4, listNode6);
        }
	nodeList.add(pcomandoseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AComandoRepita */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoRepita pcomandorepitaNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PExp pexpNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        pexpNode4 = (PExp)nodeArrayList5.get(0);

        pcomandorepitaNode1 = new AComandoRepita(listNode3, pexpNode4);
        }
	nodeList.add(pcomandorepitaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AComandoEnquanto */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoEnquanto pcomandoenquantoNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList6.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcomandoenquantoNode1 = new AComandoEnquanto(pexpNode2, listNode4);
        }
	nodeList.add(pcomandoenquantoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ACasos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCasos pcasosNode1;
        {
            // Block
        PValor pvalorNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pvalorNode2 = (PValor)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcasosNode1 = new ACasos(pvalorNode2, listNode4);
        }
	nodeList.add(pcasosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ANormalComandoAvalie */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoAvalie pcomandoavalieNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pcomandoavalieNode1 = new ANormalComandoAvalie(pexpNode2, listNode4);
        }
	nodeList.add(pcomandoavalieNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ASenaoComandoAvalie */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoAvalie pcomandoavalieNode1;
        {
            // Block
        PExp pexpNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        pexpNode2 = (PExp)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList5.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList8.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pcomandoavalieNode1 = new ASenaoComandoAvalie(pexpNode2, listNode4, listNode6);
        }
	nodeList.add(pcomandoavalieNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ANumTipospara */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipospara ptiposparaNode1;
        {
            // Block
        TNumero tnumeroNode2;
        tnumeroNode2 = (TNumero)nodeArrayList1.get(0);

        ptiposparaNode1 = new ANumTipospara(tnumeroNode2);
        }
	nodeList.add(ptiposparaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AVarTipospara */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipospara ptiposparaNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        ptiposparaNode1 = new AVarTipospara(pvarNode2);
        }
	nodeList.add(ptiposparaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ASempassoComandoPara */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoPara pcomandoparaNode1;
        {
            // Block
        PVar pvarNode2;
        PTipospara ptiposparaNode3;
        PTipospara ptiposparaNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        pvarNode2 = (PVar)nodeArrayList2.get(0);
        ptiposparaNode3 = (PTipospara)nodeArrayList4.get(0);
        ptiposparaNode4 = (PTipospara)nodeArrayList6.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList8.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pcomandoparaNode1 = new ASempassoComandoPara(pvarNode2, ptiposparaNode3, ptiposparaNode4, listNode6);
        }
	nodeList.add(pcomandoparaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ACompassoComandoPara */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoPara pcomandoparaNode1;
        {
            // Block
        PVar pvarNode2;
        PTipospara ptiposparaNode3;
        PTipospara ptiposparaNode4;
        PTipospara ptiposparaNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        pvarNode2 = (PVar)nodeArrayList2.get(0);
        ptiposparaNode3 = (PTipospara)nodeArrayList4.get(0);
        ptiposparaNode4 = (PTipospara)nodeArrayList6.get(0);
        ptiposparaNode5 = (PTipospara)nodeArrayList8.get(0);
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList10.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }

        pcomandoparaNode1 = new ACompassoComandoPara(pvarNode2, ptiposparaNode3, ptiposparaNode4, ptiposparaNode5, listNode7);
        }
	nodeList.add(pcomandoparaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ANormalComandoEscrita */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoEscrita pcomandoescritaNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList3.get(0);

        pcomandoescritaNode1 = new ANormalComandoEscrita(pexpNode2);
        }
	nodeList.add(pcomandoescritaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AStrComandoEscrita */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoEscrita pcomandoescritaNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList3.get(0);

        pcomandoescritaNode1 = new AStrComandoEscrita(tstringNode2);
        }
	nodeList.add(pcomandoescritaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AAcomandoleia1ComandoLeia */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoLeia pcomandoleiaNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList3.get(0);

        pcomandoleiaNode1 = new AComandoLeia(pvarNode2);
        }
	nodeList.add(pcomandoleiaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AAcomandoleia2ComandoLeia */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoLeia pcomandoleiaNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList4.get(0);

        pcomandoleiaNode1 = new AComandoLeia(pvarNode2);
        }
	nodeList.add(pcomandoleiaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AVariosLeia */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce AComandoAtribuicao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoAtribuicao pcomandoatribuicaoNode1;
        {
            // Block
        PVar pvarNode2;
        PExp pexpNode3;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pcomandoatribuicaoNode1 = new AComandoAtribuicao(pvarNode2, pexpNode3);
        }
	nodeList.add(pcomandoatribuicaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ATerminal$DeclVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeclVar pdeclvarNode1;
        pdeclvarNode1 = (PDeclVar)nodeArrayList1.get(0);
	if(pdeclvarNode1 != null)
	{
	  listNode2.add(pdeclvarNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ANonTerminal$DeclVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDeclVar pdeclvarNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclvarNode2 = (PDeclVar)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclvarNode2 != null)
	{
	  listNode3.add(pdeclvarNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ATerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
	if(pcomandoNode1 != null)
	{
	  listNode2.add(pcomandoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ANonTerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PComando pcomandoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcomandoNode2 = (PComando)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcomandoNode2 != null)
	{
	  listNode3.add(pcomandoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce ATerminal$DeclVarVirg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PVarld pvarldNode1;
        pvarldNode1 = (PVarld)nodeArrayList1.get(0);
	if(pvarldNode1 != null)
	{
	  listNode2.add(pvarldNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce ANonTerminal$DeclVarVirg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PVarld pvarldNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pvarldNode2 = (PVarld)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pvarldNode2 != null)
	{
	  listNode3.add(pvarldNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce ATerminal$Casos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PCasos pcasosNode1;
        pcasosNode1 = (PCasos)nodeArrayList1.get(0);
	if(pcasosNode1 != null)
	{
	  listNode2.add(pcasosNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce ANonTerminal$Casos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PCasos pcasosNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcasosNode2 = (PCasos)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcasosNode2 != null)
	{
	  listNode3.add(pcasosNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce ATerminal$VariosLeia */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce ANonTerminal$VariosLeia */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {23, SHIFT, 1}, },
			{{-1, ERROR, 1}, {56, SHIFT, 3}, },
			{{-1, ERROR, 2}, {57, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {24, SHIFT, 4}, },
			{{-1, ERROR, 4}, {4, SHIFT, 5}, {5, SHIFT, 6}, {6, SHIFT, 7}, {22, SHIFT, 8}, {25, SHIFT, 9}, {27, SHIFT, 10}, {28, SHIFT, 11}, {29, SHIFT, 12}, {33, SHIFT, 13}, {34, SHIFT, 14}, {36, SHIFT, 15}, {42, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 8}, {56, SHIFT, 32}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 10}, {11, SHIFT, 33}, },
			{{-1, ERROR, 11}, {11, SHIFT, 34}, },
			{{-1, ERROR, 12}, {11, SHIFT, 35}, },
			{{-1, ERROR, 13}, {27, SHIFT, 10}, {28, SHIFT, 11}, {29, SHIFT, 12}, {33, SHIFT, 13}, {34, SHIFT, 14}, {36, SHIFT, 15}, {42, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, ERROR, 14}, {11, SHIFT, 37}, },
			{{-1, ERROR, 15}, {56, SHIFT, 17}, },
			{{-1, ERROR, 16}, {11, SHIFT, 39}, },
			{{-1, REDUCE, 55}, {13, SHIFT, 40}, },
			{{-1, REDUCE, 82}, },
			{{-1, ERROR, 19}, {9, SHIFT, 41}, },
			{{-1, ERROR, 20}, {55, SHIFT, 42}, },
			{{-1, REDUCE, 84}, },
			{{-1, ERROR, 22}, {8, SHIFT, 43}, },
			{{-1, ERROR, 23}, {8, SHIFT, 44}, },
			{{-1, ERROR, 24}, {8, SHIFT, 45}, },
			{{-1, ERROR, 25}, {8, SHIFT, 46}, },
			{{-1, ERROR, 26}, {8, SHIFT, 47}, },
			{{-1, ERROR, 27}, {8, SHIFT, 48}, },
			{{-1, ERROR, 28}, {8, SHIFT, 49}, },
			{{-1, ERROR, 29}, {8, SHIFT, 50}, },
			{{-1, ERROR, 30}, {4, SHIFT, 5}, {5, SHIFT, 6}, {6, SHIFT, 7}, {22, SHIFT, 8}, {25, SHIFT, 51}, {27, SHIFT, 10}, {28, SHIFT, 11}, {29, SHIFT, 12}, {33, SHIFT, 13}, {34, SHIFT, 14}, {36, SHIFT, 15}, {42, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, ERROR, 31}, {25, SHIFT, 54}, {27, SHIFT, 10}, {28, SHIFT, 11}, {29, SHIFT, 12}, {33, SHIFT, 13}, {34, SHIFT, 14}, {36, SHIFT, 15}, {42, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, ERROR, 32}, {7, SHIFT, 56}, {49, SHIFT, 57}, {50, SHIFT, 58}, },
			{{-1, ERROR, 33}, {1, SHIFT, 60}, {7, SHIFT, 61}, {11, SHIFT, 62}, {48, SHIFT, 63}, {49, SHIFT, 64}, {50, SHIFT, 65}, {56, SHIFT, 17}, },
			{{-1, ERROR, 34}, {56, SHIFT, 17}, },
			{{-1, ERROR, 35}, {1, SHIFT, 60}, {11, SHIFT, 62}, {48, SHIFT, 63}, {49, SHIFT, 64}, {50, SHIFT, 65}, {56, SHIFT, 17}, },
			{{-1, ERROR, 36}, {27, SHIFT, 10}, {28, SHIFT, 11}, {29, SHIFT, 12}, {33, SHIFT, 13}, {34, SHIFT, 14}, {36, SHIFT, 15}, {38, SHIFT, 82}, {42, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, ERROR, 37}, {1, SHIFT, 60}, {11, SHIFT, 62}, {48, SHIFT, 63}, {49, SHIFT, 64}, {50, SHIFT, 65}, {56, SHIFT, 17}, },
			{{-1, ERROR, 38}, {37, SHIFT, 84}, },
			{{-1, ERROR, 39}, {1, SHIFT, 60}, {11, SHIFT, 62}, {48, SHIFT, 63}, {49, SHIFT, 64}, {50, SHIFT, 65}, {56, SHIFT, 17}, },
			{{-1, ERROR, 40}, {1, SHIFT, 60}, {11, SHIFT, 86}, {49, SHIFT, 64}, {50, SHIFT, 65}, {56, SHIFT, 17}, },
			{{-1, ERROR, 41}, {56, SHIFT, 88}, },
			{{-1, ERROR, 42}, {1, SHIFT, 60}, {11, SHIFT, 86}, {49, SHIFT, 64}, {50, SHIFT, 65}, {56, SHIFT, 17}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 83}, },
			{{-1, ERROR, 53}, {25, SHIFT, 93}, {27, SHIFT, 10}, {28, SHIFT, 11}, {29, SHIFT, 12}, {33, SHIFT, 13}, {34, SHIFT, 14}, {36, SHIFT, 15}, {42, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 85}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 59}, {8, SHIFT, 94}, },
			{{-1, ERROR, 60}, {1, SHIFT, 60}, {11, SHIFT, 86}, {49, SHIFT, 64}, {50, SHIFT, 65}, {56, SHIFT, 17}, },
			{{-1, ERROR, 61}, {12, SHIFT, 96}, },
			{{-1, ERROR, 62}, {1, SHIFT, 60}, {11, SHIFT, 62}, {48, SHIFT, 63}, {49, SHIFT, 64}, {50, SHIFT, 65}, {56, SHIFT, 17}, },
			{{-1, ERROR, 63}, {1, SHIFT, 60}, {11, SHIFT, 99}, {48, SHIFT, 100}, {49, SHIFT, 64}, {50, SHIFT, 65}, {56, SHIFT, 17}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 66}, {12, SHIFT, 103}, },
			{{-1, REDUCE, 16}, {0, SHIFT, 104}, {1, SHIFT, 105}, {16, SHIFT, 106}, {17, SHIFT, 107}, {18, SHIFT, 108}, {19, SHIFT, 109}, {20, SHIFT, 110}, {21, SHIFT, 111}, },
			{{-1, REDUCE, 19}, {2, SHIFT, 115}, {3, SHIFT, 116}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 71}, {18, SHIFT, 108}, {21, SHIFT, 111}, },
			{{-1, REDUCE, 41}, {46, SHIFT, 119}, },
			{{-1, REDUCE, 46}, {47, SHIFT, 121}, },
			{{-1, REDUCE, 48}, {45, SHIFT, 123}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 77}, {10, SHIFT, 125}, {12, SHIFT, 126}, },
			{{-1, REDUCE, 90}, },
			{{-1, ERROR, 79}, {56, SHIFT, 17}, },
			{{-1, ERROR, 80}, {0, SHIFT, 104}, {1, SHIFT, 105}, {16, SHIFT, 106}, {17, SHIFT, 107}, {18, SHIFT, 108}, {19, SHIFT, 109}, {20, SHIFT, 110}, {21, SHIFT, 111}, },
			{{-1, ERROR, 81}, {12, SHIFT, 129}, },
			{{-1, ERROR, 82}, {11, SHIFT, 130}, },
			{{-1, ERROR, 83}, {12, SHIFT, 131}, },
			{{-1, ERROR, 84}, {49, SHIFT, 132}, {56, SHIFT, 17}, },
			{{-1, ERROR, 85}, {12, SHIFT, 135}, },
			{{-1, ERROR, 86}, {1, SHIFT, 60}, {11, SHIFT, 86}, {49, SHIFT, 64}, {50, SHIFT, 65}, {56, SHIFT, 17}, },
			{{-1, ERROR, 87}, {0, SHIFT, 104}, {1, SHIFT, 105}, {14, SHIFT, 137}, },
			{{-1, REDUCE, 8}, {13, SHIFT, 138}, },
			{{-1, REDUCE, 86}, },
			{{-1, ERROR, 90}, {8, SHIFT, 139}, {10, SHIFT, 140}, },
			{{-1, ERROR, 91}, {56, SHIFT, 88}, },
			{{-1, REDUCE, 81}, {0, SHIFT, 104}, {1, SHIFT, 105}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 97}, {0, SHIFT, 104}, {1, SHIFT, 105}, {12, SHIFT, 143}, {16, SHIFT, 106}, {17, SHIFT, 107}, {18, SHIFT, 108}, {19, SHIFT, 109}, {20, SHIFT, 110}, {21, SHIFT, 111}, },
			{{-1, ERROR, 98}, {12, SHIFT, 144}, },
			{{-1, ERROR, 99}, {1, SHIFT, 60}, {11, SHIFT, 62}, {48, SHIFT, 63}, {49, SHIFT, 64}, {50, SHIFT, 65}, {56, SHIFT, 17}, },
			{{-1, ERROR, 100}, {1, SHIFT, 60}, {11, SHIFT, 99}, {48, SHIFT, 100}, {49, SHIFT, 64}, {50, SHIFT, 65}, {56, SHIFT, 17}, },
			{{-1, ERROR, 101}, {0, SHIFT, 104}, {1, SHIFT, 105}, {16, SHIFT, 106}, {17, SHIFT, 107}, {18, SHIFT, 108}, {19, SHIFT, 109}, {20, SHIFT, 110}, {21, SHIFT, 111}, },
			{{-1, REDUCE, 54}, {18, REDUCE, 44}, {21, REDUCE, 44}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 112}, {1, SHIFT, 60}, {11, SHIFT, 86}, {49, SHIFT, 64}, {50, SHIFT, 65}, {56, SHIFT, 17}, },
			{{-1, ERROR, 113}, {1, SHIFT, 60}, {11, SHIFT, 86}, {49, SHIFT, 64}, {50, SHIFT, 65}, {56, SHIFT, 17}, },
			{{-1, ERROR, 114}, {1, SHIFT, 60}, {11, SHIFT, 86}, {49, SHIFT, 64}, {50, SHIFT, 65}, {56, SHIFT, 17}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 117}, {1, SHIFT, 60}, {11, SHIFT, 86}, {49, SHIFT, 64}, {50, SHIFT, 65}, {56, SHIFT, 17}, },
			{{-1, ERROR, 118}, {1, SHIFT, 60}, {11, SHIFT, 152}, {48, SHIFT, 153}, {49, SHIFT, 64}, {50, SHIFT, 65}, {56, SHIFT, 17}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 120}, {1, SHIFT, 60}, {11, SHIFT, 99}, {48, SHIFT, 100}, {49, SHIFT, 64}, {50, SHIFT, 65}, {56, SHIFT, 17}, },
			{{-1, REDUCE, 39}, },
			{{-1, ERROR, 122}, {1, SHIFT, 60}, {11, SHIFT, 99}, {48, SHIFT, 100}, {49, SHIFT, 64}, {50, SHIFT, 65}, {56, SHIFT, 17}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 124}, {1, SHIFT, 60}, {11, SHIFT, 99}, {48, SHIFT, 100}, {49, SHIFT, 64}, {50, SHIFT, 65}, {56, SHIFT, 17}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 127}, {10, SHIFT, 125}, {12, SHIFT, 159}, },
			{{-1, REDUCE, 91}, },
			{{-1, ERROR, 129}, {30, SHIFT, 160}, },
			{{-1, ERROR, 130}, {1, SHIFT, 60}, {11, SHIFT, 62}, {48, SHIFT, 63}, {49, SHIFT, 64}, {50, SHIFT, 65}, {56, SHIFT, 17}, },
			{{-1, ERROR, 131}, {39, SHIFT, 162}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 134}, {38, SHIFT, 163}, {41, SHIFT, 164}, },
			{{-1, ERROR, 135}, {43, SHIFT, 165}, },
			{{-1, ERROR, 136}, {0, SHIFT, 104}, {1, SHIFT, 105}, {12, SHIFT, 143}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 138}, {49, SHIFT, 168}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 87}, },
			{{-1, ERROR, 142}, {8, SHIFT, 169}, {10, SHIFT, 140}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 51}, {18, REDUCE, 42}, {21, REDUCE, 42}, },
			{{-1, ERROR, 145}, {12, SHIFT, 170}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 147}, {1, SHIFT, 60}, {11, SHIFT, 86}, {49, SHIFT, 64}, {50, SHIFT, 65}, {56, SHIFT, 17}, },
			{{-1, REDUCE, 18}, {2, SHIFT, 115}, {3, SHIFT, 116}, },
			{{-1, REDUCE, 52}, {0, SHIFT, 104}, {1, SHIFT, 105}, {18, REDUCE, 43}, {21, REDUCE, 43}, },
			{{-1, REDUCE, 53}, {0, SHIFT, 104}, {1, SHIFT, 105}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 152}, {1, SHIFT, 60}, {11, SHIFT, 62}, {48, SHIFT, 63}, {49, SHIFT, 64}, {50, SHIFT, 65}, {56, SHIFT, 17}, },
			{{-1, ERROR, 153}, {1, SHIFT, 60}, {11, SHIFT, 99}, {48, SHIFT, 100}, {49, SHIFT, 64}, {50, SHIFT, 65}, {56, SHIFT, 17}, },
			{{-1, ERROR, 154}, {0, SHIFT, 104}, {1, SHIFT, 105}, {16, SHIFT, 106}, {17, SHIFT, 107}, {19, SHIFT, 109}, {20, SHIFT, 110}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 45}, {47, SHIFT, 121}, },
			{{-1, REDUCE, 47}, {45, SHIFT, 123}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 79}, },
			{{-1, ERROR, 160}, {27, SHIFT, 10}, {28, SHIFT, 11}, {29, SHIFT, 12}, {33, SHIFT, 13}, {34, SHIFT, 14}, {36, SHIFT, 15}, {42, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, ERROR, 161}, {12, SHIFT, 176}, },
			{{-1, ERROR, 162}, {27, SHIFT, 10}, {28, SHIFT, 11}, {29, SHIFT, 12}, {33, SHIFT, 13}, {34, SHIFT, 14}, {36, SHIFT, 15}, {42, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, ERROR, 163}, {49, SHIFT, 132}, {56, SHIFT, 17}, },
			{{-1, ERROR, 164}, {49, SHIFT, 132}, {56, SHIFT, 17}, },
			{{-1, ERROR, 165}, {7, SHIFT, 56}, {49, SHIFT, 57}, {50, SHIFT, 58}, },
			{{-1, REDUCE, 88}, },
			{{-1, ERROR, 167}, {31, SHIFT, 181}, {43, SHIFT, 165}, {44, SHIFT, 182}, },
			{{-1, ERROR, 168}, {14, SHIFT, 184}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 52}, {0, SHIFT, 104}, {1, SHIFT, 105}, },
			{{-1, ERROR, 172}, {12, SHIFT, 185}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 174}, {1, SHIFT, 60}, {11, SHIFT, 86}, {49, SHIFT, 64}, {50, SHIFT, 65}, {56, SHIFT, 17}, },
			{{-1, ERROR, 175}, {27, SHIFT, 10}, {28, SHIFT, 11}, {29, SHIFT, 12}, {31, SHIFT, 187}, {32, SHIFT, 188}, {33, SHIFT, 13}, {34, SHIFT, 14}, {36, SHIFT, 15}, {42, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 177}, {27, SHIFT, 10}, {28, SHIFT, 11}, {29, SHIFT, 12}, {33, SHIFT, 13}, {34, SHIFT, 14}, {35, SHIFT, 189}, {36, SHIFT, 15}, {42, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, ERROR, 178}, {39, SHIFT, 190}, },
			{{-1, ERROR, 179}, {38, SHIFT, 191}, },
			{{-1, ERROR, 180}, {9, SHIFT, 192}, },
			{{-1, ERROR, 181}, {9, SHIFT, 193}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 43}, {0, SHIFT, 104}, {1, SHIFT, 105}, },
			{{-1, ERROR, 187}, {27, SHIFT, 10}, {28, SHIFT, 11}, {29, SHIFT, 12}, {33, SHIFT, 13}, {34, SHIFT, 14}, {36, SHIFT, 15}, {42, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 190}, {27, SHIFT, 10}, {28, SHIFT, 11}, {29, SHIFT, 12}, {33, SHIFT, 13}, {34, SHIFT, 14}, {36, SHIFT, 15}, {42, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, ERROR, 191}, {49, SHIFT, 132}, {56, SHIFT, 17}, },
			{{-1, ERROR, 192}, {27, SHIFT, 10}, {28, SHIFT, 11}, {29, SHIFT, 12}, {33, SHIFT, 13}, {34, SHIFT, 14}, {36, SHIFT, 15}, {42, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, ERROR, 193}, {27, SHIFT, 10}, {28, SHIFT, 11}, {29, SHIFT, 12}, {33, SHIFT, 13}, {34, SHIFT, 14}, {36, SHIFT, 15}, {42, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, ERROR, 194}, {27, SHIFT, 10}, {28, SHIFT, 11}, {29, SHIFT, 12}, {32, SHIFT, 199}, {33, SHIFT, 13}, {34, SHIFT, 14}, {36, SHIFT, 15}, {42, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, ERROR, 195}, {27, SHIFT, 10}, {28, SHIFT, 11}, {29, SHIFT, 12}, {33, SHIFT, 13}, {34, SHIFT, 14}, {36, SHIFT, 15}, {40, SHIFT, 200}, {42, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, ERROR, 196}, {39, SHIFT, 201}, },
			{{-1, REDUCE, 69}, {27, SHIFT, 10}, {28, SHIFT, 11}, {29, SHIFT, 12}, {33, SHIFT, 13}, {34, SHIFT, 14}, {36, SHIFT, 15}, {42, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, ERROR, 198}, {27, SHIFT, 10}, {28, SHIFT, 11}, {29, SHIFT, 12}, {33, SHIFT, 13}, {34, SHIFT, 14}, {36, SHIFT, 15}, {42, SHIFT, 16}, {44, SHIFT, 202}, {56, SHIFT, 17}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 201}, {27, SHIFT, 10}, {28, SHIFT, 11}, {29, SHIFT, 12}, {33, SHIFT, 13}, {34, SHIFT, 14}, {36, SHIFT, 15}, {42, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 203}, {27, SHIFT, 10}, {28, SHIFT, 11}, {29, SHIFT, 12}, {33, SHIFT, 13}, {34, SHIFT, 14}, {36, SHIFT, 15}, {40, SHIFT, 204}, {42, SHIFT, 16}, {56, SHIFT, 17}, },
			{{-1, REDUCE, 75}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 18}, {30, 52}, },
			{{-1, 89}, {91, 141}, },
			{{-1, 90}, {91, 142}, },
			{{-1, 19}, },
			{{-1, 59}, {165, 180}, },
			{{-1, 66}, {39, 85}, },
			{{-1, 101}, {33, 67}, {35, 80}, {37, 80}, {39, 67}, {40, 87}, {42, 92}, {62, 97}, {86, 136}, {99, 97}, {113, 149}, {114, 150}, {118, 154}, {130, 80}, {147, 171}, {152, 97}, {174, 186}, },
			{{-1, 112}, },
			{{-1, 68}, {112, 148}, },
			{{-1, 117}, },
			{{-1, 69}, {60, 95}, {117, 151}, },
			{{-1, 113}, {101, 147}, {154, 174}, },
			{{-1, 114}, {71, 118}, },
			{{-1, 120}, },
			{{-1, 124}, },
			{{-1, 122}, },
			{{-1, 70}, {35, 81}, {37, 83}, {62, 98}, {99, 145}, {130, 161}, {152, 172}, },
			{{-1, 71}, {118, 155}, },
			{{-1, 72}, },
			{{-1, 73}, {120, 156}, },
			{{-1, 74}, {122, 157}, },
			{{-1, 75}, {63, 102}, {100, 146}, {124, 158}, {153, 173}, },
			{{-1, 76}, {4, 20}, {13, 20}, {15, 38}, {30, 20}, {31, 20}, {34, 77}, {36, 20}, {53, 20}, {79, 127}, {84, 133}, {160, 20}, {162, 20}, {163, 133}, {164, 133}, {175, 20}, {177, 20}, {187, 20}, {190, 20}, {191, 133}, {192, 20}, {193, 20}, {194, 20}, {195, 20}, {197, 20}, {198, 20}, {201, 20}, {203, 20}, },
			{{-1, 21}, {31, 55}, {36, 55}, {53, 55}, {175, 55}, {177, 55}, {194, 55}, {195, 55}, {197, 55}, {198, 55}, {203, 55}, },
			{{-1, 22}, },
			{{-1, 23}, },
			{{-1, 24}, },
			{{-1, 166}, {167, 183}, },
			{{-1, 25}, },
			{{-1, 134}, {163, 178}, {164, 179}, {191, 196}, },
			{{-1, 26}, },
			{{-1, 27}, },
			{{-1, 28}, },
			{{-1, 78}, {79, 128}, },
			{{-1, 29}, },
			{{-1, 30}, },
			{{-1, 31}, {13, 36}, {30, 53}, {160, 175}, {162, 177}, {187, 194}, {190, 195}, {192, 197}, {193, 198}, {201, 203}, },
			{{-1, 91}, },
			{{-1, 167}, },
			{{-1, 79}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'programa'",
			"expecting: identificador",
			"expecting: EOF",
			"expecting: 'inicio'",
			"expecting: 'caractere', 'real', 'inteiro', 'const', 'fim.', 'escreva', 'leia', 'se', 'repita', 'enquanto', 'para', 'avalie', identificador",
			"expecting: ':'",
			"expecting: '('",
			"expecting: 'escreva', 'leia', 'se', 'repita', 'enquanto', 'para', 'avalie', identificador",
			"expecting: '+', '-', '*', '/', ';', ',', ')', '[', ']', '>', '<', '=', '>=', '<=', '<>', 'de', 'ate', 'faca', 'passo', 'e', 'ou', 'xor', ':='",
			"expecting: ':='",
			"expecting: 'fim.', 'escreva', 'leia', 'se', 'senao', 'fim se', 'repita', 'enquanto', 'fim enquanto', 'para', 'ate', 'fim para', 'avalie', 'caso', 'fim avalie', identificador",
			"expecting: ';'",
			"expecting: 'fim.', 'escreva', 'leia', 'se', 'repita', 'enquanto', 'para', 'avalie', identificador",
			"expecting: string, numero, numero real",
			"expecting: '-', string, '(', 'nao', numero, numero real, identificador",
			"expecting: '-', '(', 'nao', numero, numero real, identificador",
			"expecting: 'escreva', 'leia', 'se', 'repita', 'enquanto', 'para', 'ate', 'avalie', identificador",
			"expecting: 'de'",
			"expecting: '-', '(', numero, numero real, identificador",
			"expecting: ';', ':'",
			"expecting: ')'",
			"expecting: '+', '-', '*', '/', ';', ')', ']', '>', '<', '=', '>=', '<=', '<>', 'e', 'ou', 'xor'",
			"expecting: '+', '-', ')', '>', '<', '=', '>=', '<=', '<>'",
			"expecting: '=', '<>'",
			"expecting: ')', 'ou'",
			"expecting: ')', 'ou', 'xor'",
			"expecting: ')', 'e', 'ou', 'xor'",
			"expecting: ',', ')'",
			"expecting: '+', '-', '>', '<', '=', '>=', '<=', '<>'",
			"expecting: numero, identificador",
			"expecting: '+', '-', ']'",
			"expecting: ';', ',', '['",
			"expecting: ';', ','",
			"expecting: '+', '-', ';'",
			"expecting: ')', '=', '<>', 'e', 'ou', 'xor'",
			"expecting: 'entao'",
			"expecting: 'faca'",
			"expecting: 'ate', 'faca', 'passo'",
			"expecting: 'ate', 'passo'",
			"expecting: 'caso'",
			"expecting: '+', '-', ')'",
			"expecting: '+', '-', '*', '/', ';', ',', ')', ']', '>', '<', '=', '>=', '<=', '<>', 'de', 'ate', 'faca', 'passo', 'e', 'ou', 'xor', ':='",
			"expecting: numero",
			"expecting: '+', '-', ')', '=', '<>', 'e', 'ou', 'xor'",
			"expecting: '+', '-', '>', '<', '>=', '<='",
			"expecting: 'senao', 'caso', 'fim avalie'",
			"expecting: ']'",
			"expecting: 'escreva', 'leia', 'se', 'senao', 'fim se', 'repita', 'enquanto', 'para', 'avalie', identificador",
			"expecting: 'escreva', 'leia', 'se', 'repita', 'enquanto', 'fim enquanto', 'para', 'avalie', identificador",
			"expecting: 'ate'",
			"expecting: 'escreva', 'leia', 'se', 'fim se', 'repita', 'enquanto', 'para', 'avalie', identificador",
			"expecting: 'escreva', 'leia', 'se', 'repita', 'enquanto', 'para', 'fim para', 'avalie', identificador",
			"expecting: 'escreva', 'leia', 'se', 'senao', 'repita', 'enquanto', 'para', 'avalie', 'caso', 'fim avalie', identificador",
			"expecting: 'escreva', 'leia', 'se', 'repita', 'enquanto', 'para', 'avalie', 'fim avalie', identificador",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 5, 5, 1, 2, 6, 6, 6, 7, 6, 1, 6, 8, 4, 5, 9, 10, 11, 11, 11, 11, 11, 11, 11, 11, 4, 12, 13, 14, 1, 15, 16, 15, 17, 15, 18, 1, 18, 10, 10, 10, 10, 10, 10, 10, 10, 2, 4, 12, 2, 10, 19, 19, 19, 11, 18, 20, 15, 15, 21, 21, 20, 22, 21, 21, 20, 23, 24, 25, 26, 26, 21, 27, 1, 1, 28, 20, 6, 20, 29, 20, 18, 30, 31, 1, 32, 1, 33, 2, 4, 21, 11, 22, 20, 15, 15, 28, 34, 11, 18, 18, 18, 18, 15, 18, 18, 15, 18, 18, 18, 18, 18, 18, 15, 15, 15, 15, 15, 15, 15, 1, 11, 27, 1, 35, 15, 36, 37, 37, 38, 39, 40, 41, 42, 4, 1, 1, 32, 21, 34, 20, 34, 18, 21, 43, 43, 21, 15, 15, 44, 20, 25, 26, 26, 11, 7, 20, 7, 29, 29, 13, 45, 45, 46, 4, 34, 43, 20, 20, 18, 47, 11, 48, 36, 49, 5, 5, 11, 45, 32, 20, 40, 7, 11, 11, 7, 29, 7, 7, 50, 51, 36, 52, 53, 11, 11, 7, 11, 51, 11, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
