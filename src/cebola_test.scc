Helpers

    tudo = [0 .. 0xffff];
    /* Letras e Digitos */
    digito = ['0'..'9'];
    letra = ['a'..'z'] | ['A' ..'Z'];   
    hexa = ['a'..'f'] | ['A' .. 'F'];
    sem_asterisco = [tudo - '*'];
    sem_asterisco_barra = [sem_asterisco - '/']; 
         
    /* Caracteres de espaco */
    tab = 9;
    carriage_return = 13;
    nova_linha = 10; //new Line
    //eol = nl | cr | cr nl;
    eol = carriage_return | nova_linha | carriage_return nova_linha;
    nao_linha_fim = [tudo -[nova_linha + carriage_return]];
    underscore = '_';
    
    branco = (' ' | tab | eol)+;
States
    normal, /* The first state is the initial state. */
    comentario;

Tokens

/* Palavras reservadas */
caractere = 'caractere';
inteiro = 'inteiro';
real = 'real';
booleano = 'booleano';

inicio = 'inicio';
fimprograma= 'fim.';

se = 'se';
entao = 'entao';
senao = 'senao';
fimse = 'fim se';

avalie = 'avalie';
caso = 'caso';
fimavalie = 'fim avalie';

enquanto = 'enquanto';
faca = 'faca';
fimenquanto = 'fim enquanto';

repita = 'repita';
para = 'para';
de = 'de';
passo = 'passo';
ate = 'ate';
fimpara = 'fim para';

verdadeiro = 'verdadeiro';
falso = 'falso';

programa = 'programa';
leia = 'leia';
escreva = 'escreva';
vetor = 'vetor';
const = 'const';

/*Especificacao para producoes*/
token_specifier = 'T';
production_specifier = 'P';

/*Operadores aritimeticos*/
add = '+';
sub = '-';
mult = '*';
div = '/';

/*Operadores relacionais*/
maiorq = '>';
menorq = '<';
maioriq = '>=';
menoriq = '<=';
igual = '=';
diferente = '<>';

/*Operadores Booleanos*/
nao = 'nao';
e = 'e';
ou = 'ou';

/*Operador Atribuicao*/
atrib = ':=';

/*Delimitadores*/
abreparenteses = '(';
fechaparenteses = ')';
l_bkt = '[';
r_bkt = ']';
virg = ',';
pontoevirg = ';';
ponto = '.';
doispontos = ':';

/*Comentarios*/
comentlinha = '//'(nao_linha_fim)* nova_linha;
abrebloco = '/*';
fechabloco = '*/' ;

/* Identificadores (letras, numeros) */
id = (underscore | letra)(letra | digito | underscore)*;
//numero = digito+;
num_inteiro = digito+;
num_real = digito+ ',' digito+;
string = '''(nao_linha_fim)*''' ;

blank = branco+;

Ignored Tokens

    blank,
    comentlinha;//,//fechabloco,abrebloco;
    //coment_bloco;

Productions

cebola = programa id inicio declaracao* comando* fimprograma;

declaracao = {variavel} tipo doispontos var_vir* var pontoevirg | {constante} const id valor pontoevirg;
var_vir = {vars} var virg;
var = {simples} id | {vetor} id l_bkt num_inteiro r_bkt;

valor = {inteiro} num_inteiro | {real} num_real | {string} string;
tipo = {real} real | {inteiro} inteiro | {caractere} caractere | {booleano} booleano;

exp = {numerica} exp_num | {logica} exp_logica;
exp_num = {abaixo} termo soma exp_num | {termo} termo;
soma = {adicao} add | {subtracao}sub;
termo = {acima} termo mult fator |{fator} fator;
mult = {multiplicacao} mult |{divisao} div;
fator = {precedencia} aparentese expnum fparentese
    | {negativo}sub fator
    | {inteiro}num_inteiro
    | {real}num_real
    | {variavel}var;


boleana  = {menorigual} menoriq
	| {maiorigual} maioriq 
	| {menor} menorq 
	| {maior} maiorq;
		 
comparacao  = {igual} igual | {diferente} diferente ;
	   
or  = ou ;
and  = e  ; 
xor  = xor;

exp_logica = {conjunto} naofator comparacao nao fator | {direto} linicio;

naoigualfator = {parenteses} abreparenteses exp_logica fechaparenteses 
		| {exp} expnum boleana expnum 
		| {nao} nao lfator ;

linicio  = {cadeia}linicio or lmeio 
	 | {simples}lmeio;
				  
lmeio  = {cadeia}lmeio lxor ltermo 
	| {simples}ltermo ;
				 
ltermo  = {cadeia} ltermo and lfator 
	| {simples}lfator;

lfator  = {parenteses} abreparenteses exp_logica fechaparenteses
	 | {exp} expnum booleana expnum 
	 | {expig} expnum comparacao expnum  
	 | {nao} nao lfator ;

comando =  {leia} comando_leia pontovirgula 
		 | {repita} comando_repita pontoevirg 
		 | {enquanto} comando_enquanto pontoevirg 
		 | {avaliar} comando_avalie pontoevirg 
		 | {escrita} comando_escrita pontoevirg 
		 | {se} comando_se pontoevirg
		 | {atribuicao} comando_atribuicao pontoevirg  
		 | {para} comando_para pontoevirg ;


comando_se = {se} se abreparenteses exp_logica fechaparenteses entao comando+ fimse 
		   | {se_nao} se abreparenteses exp_logica fechaparenteses entao comando+ senao comando+ fimse;		   

comando_repita = repita comando+ ate abreparenteses exp_logica fechaparenteses ;
 
comando_enquanto = enquanto abreparenteses exp_logica fechaparenteses faca comando+ fimenquanto;

casos = caso valor doispontos comando+;

comando_avalie = {normal} avalie abreparenteses expr fechaparenteses casos+ fimavalie
     			|{senao}avalie abreparenteses expr fechaparenteses casos+ senao doispontos comando+ fimavalie ;

paratipos = {num}numero 
		  | {var}var  {-> New paratipos.var(var)};