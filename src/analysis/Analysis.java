/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseATotal(ATotal node);
    void caseAVariavelDeclaracaoVariavel(AVariavelDeclaracaoVariavel node);
    void caseADconstanteDeclaracaoVariavel(ADconstanteDeclaracaoVariavel node);
    void caseASimplesVariaveld(ASimplesVariaveld node);
    void caseAVetorVariaveld(AVetorVariaveld node);
    void caseACaractereTipo(ACaractereTipo node);
    void caseAInteiroTipo(AInteiroTipo node);
    void caseARealTipo(ARealTipo node);
    void caseAStringValor(AStringValor node);
    void caseANumeroValor(ANumeroValor node);
    void caseARealValor(ARealValor node);
    void caseAOperacaoExpr(AOperacaoExpr node);
    void caseAOperacaologicaExpr(AOperacaologicaExpr node);
    void caseANegativoExpr(ANegativoExpr node);
    void caseANegadoExpr(ANegadoExpr node);
    void caseAInternoExpr(AInternoExpr node);
    void caseANumeroExpr(ANumeroExpr node);
    void caseARealExpr(ARealExpr node);
    void caseAVariavelExpr(AVariavelExpr node);
    void caseAIdVar(AIdVar node);
    void caseAVetorVar(AVetorVar node);
    void caseAAddOperacao(AAddOperacao node);
    void caseASubOperacao(ASubOperacao node);
    void caseAMultOperacao(AMultOperacao node);
    void caseADivOperacao(ADivOperacao node);
    void caseAMenorigOperacaologica(AMenorigOperacaologica node);
    void caseAMaiorigOperacaologica(AMaiorigOperacaologica node);
    void caseAMenorOperacaologica(AMenorOperacaologica node);
    void caseAMaiorOperacaologica(AMaiorOperacaologica node);
    void caseAIgualOperacaologica(AIgualOperacaologica node);
    void caseADiffOperacaologica(ADiffOperacaologica node);
    void caseAXorOperacaologica(AXorOperacaologica node);
    void caseAOuOperacaologica(AOuOperacaologica node);
    void caseAEOperacaologica(AEOperacaologica node);
    void caseASeComandoSe(ASeComandoSe node);
    void caseASeNaoComandoSe(ASeNaoComandoSe node);
    void caseAComandoRepita(AComandoRepita node);
    void caseAComandoEnquanto(AComandoEnquanto node);
    void caseACasos(ACasos node);
    void caseANormalComandoAvalie(ANormalComandoAvalie node);
    void caseASenaoComandoAvalie(ASenaoComandoAvalie node);
    void caseANumParatipos(ANumParatipos node);
    void caseAVarParatipos(AVarParatipos node);
    void caseASempassoComandoPara(ASempassoComandoPara node);
    void caseACompassoComandoPara(ACompassoComandoPara node);
    void caseANormalComandoEscrita(ANormalComandoEscrita node);
    void caseAStrComandoEscrita(AStrComandoEscrita node);
    void caseAComandoLeia(AComandoLeia node);
    void caseAComandoAtribuicao(AComandoAtribuicao node);
    void caseALeiaComando(ALeiaComando node);
    void caseARepitaComando(ARepitaComando node);
    void caseAEnquantoComando(AEnquantoComando node);
    void caseAAvaliarComando(AAvaliarComando node);
    void caseAEscritaComando(AEscritaComando node);
    void caseASeComando(ASeComando node);
    void caseAAtribuicaoComando(AAtribuicaoComando node);
    void caseAParaComando(AParaComando node);

    void caseTAdicao(TAdicao node);
    void caseTSubtracao(TSubtracao node);
    void caseTMultiplicacao(TMultiplicacao node);
    void caseTDivisao(TDivisao node);
    void caseTCaractere(TCaractere node);
    void caseTReal(TReal node);
    void caseTInteiro(TInteiro node);
    void caseTString(TString node);
    void caseTPontovirgula(TPontovirgula node);
    void caseTDoispontos(TDoispontos node);
    void caseTVirgula(TVirgula node);
    void caseTAbreparenteses(TAbreparenteses node);
    void caseTFechaparenteses(TFechaparenteses node);
    void caseTAbrecolchete(TAbrecolchete node);
    void caseTFecharcolchete(TFecharcolchete node);
    void caseTAspa(TAspa node);
    void caseTMaiorque(TMaiorque node);
    void caseTMenorque(TMenorque node);
    void caseTIgual(TIgual node);
    void caseTMaiorigual(TMaiorigual node);
    void caseTMenorigual(TMenorigual node);
    void caseTDiferente(TDiferente node);
    void caseTConst(TConst node);
    void caseTPrograma(TPrograma node);
    void caseTInicio(TInicio node);
    void caseTFimponto(TFimponto node);
    void caseTPonto(TPonto node);
    void caseTEscreva(TEscreva node);
    void caseTLeia(TLeia node);
    void caseTSe(TSe node);
    void caseTEntao(TEntao node);
    void caseTSenao(TSenao node);
    void caseTFimse(TFimse node);
    void caseTRepita(TRepita node);
    void caseTEnquanto(TEnquanto node);
    void caseTFimenquanto(TFimenquanto node);
    void caseTPara(TPara node);
    void caseTDe(TDe node);
    void caseTAte(TAte node);
    void caseTFaca(TFaca node);
    void caseTFimpara(TFimpara node);
    void caseTPasso(TPasso node);
    void caseTAvalie(TAvalie node);
    void caseTCaso(TCaso node);
    void caseTFimavalie(TFimavalie node);
    void caseTE(TE node);
    void caseTOu(TOu node);
    void caseTXor(TXor node);
    void caseTNao(TNao node);
    void caseTNumero(TNumero node);
    void caseTNumeroReal(TNumeroReal node);
    void caseTComentarioemlinha(TComentarioemlinha node);
    void caseTLf(TLf node);
    void caseTEspaco(TEspaco node);
    void caseTCr(TCr node);
    void caseTComentado(TComentado node);
    void caseTComentadofinal(TComentadofinal node);
    void caseTCorpo(TCorpo node);
    void caseTEstrela(TEstrela node);
    void caseTBarra(TBarra node);
    void caseTAtribuicao(TAtribuicao node);
    void caseTIdentificador(TIdentificador node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
