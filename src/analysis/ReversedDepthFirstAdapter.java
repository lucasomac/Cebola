/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPCebola().apply(this);
        outStart(node);
    }

    public void inACebola(ACebola node)
    {
        defaultIn(node);
    }

    public void outACebola(ACebola node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACebola(ACebola node)
    {
        inACebola(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDeclVar> copy = new ArrayList<PDeclVar>(node.getDeclVar());
            Collections.reverse(copy);
            for(PDeclVar e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outACebola(node);
    }

    public void inAVariavelDeclVar(AVariavelDeclVar node)
    {
        defaultIn(node);
    }

    public void outAVariavelDeclVar(AVariavelDeclVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelDeclVar(AVariavelDeclVar node)
    {
        inAVariavelDeclVar(node);
        if(node.getSegundo() != null)
        {
            node.getSegundo().apply(this);
        }
        {
            List<PVarld> copy = new ArrayList<PVarld>(node.getPrimeiro());
            Collections.reverse(copy);
            for(PVarld e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAVariavelDeclVar(node);
    }

    public void inADconstanteDeclVar(ADconstanteDeclVar node)
    {
        defaultIn(node);
    }

    public void outADconstanteDeclVar(ADconstanteDeclVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADconstanteDeclVar(ADconstanteDeclVar node)
    {
        inADconstanteDeclVar(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outADconstanteDeclVar(node);
    }

    public void inASimplesVarld(ASimplesVarld node)
    {
        defaultIn(node);
    }

    public void outASimplesVarld(ASimplesVarld node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplesVarld(ASimplesVarld node)
    {
        inASimplesVarld(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outASimplesVarld(node);
    }

    public void inAVetorVarld(AVetorVarld node)
    {
        defaultIn(node);
    }

    public void outAVetorVarld(AVetorVarld node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorVarld(AVetorVarld node)
    {
        inAVetorVarld(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAVetorVarld(node);
    }

    public void inACaractereTipo(ACaractereTipo node)
    {
        defaultIn(node);
    }

    public void outACaractereTipo(ACaractereTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaractereTipo(ACaractereTipo node)
    {
        inACaractereTipo(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outACaractereTipo(node);
    }

    public void inAInteiroTipo(AInteiroTipo node)
    {
        defaultIn(node);
    }

    public void outAInteiroTipo(AInteiroTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroTipo(AInteiroTipo node)
    {
        inAInteiroTipo(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAInteiroTipo(node);
    }

    public void inARealTipo(ARealTipo node)
    {
        defaultIn(node);
    }

    public void outARealTipo(ARealTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTipo(ARealTipo node)
    {
        inARealTipo(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARealTipo(node);
    }

    public void inAStringValor(AStringValor node)
    {
        defaultIn(node);
    }

    public void outAStringValor(AStringValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringValor(AStringValor node)
    {
        inAStringValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValor(node);
    }

    public void inANumeroValor(ANumeroValor node)
    {
        defaultIn(node);
    }

    public void outANumeroValor(ANumeroValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroValor(ANumeroValor node)
    {
        inANumeroValor(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outANumeroValor(node);
    }

    public void inARealValor(ARealValor node)
    {
        defaultIn(node);
    }

    public void outARealValor(ARealValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealValor(ARealValor node)
    {
        inARealValor(node);
        if(node.getNumeroReal() != null)
        {
            node.getNumeroReal().apply(this);
        }
        outARealValor(node);
    }

    public void inAOperacaoExp(AOperacaoExp node)
    {
        defaultIn(node);
    }

    public void outAOperacaoExp(AOperacaoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOperacaoExp(AOperacaoExp node)
    {
        inAOperacaoExp(node);
        if(node.getSegundo() != null)
        {
            node.getSegundo().apply(this);
        }
        if(node.getOperacao() != null)
        {
            node.getOperacao().apply(this);
        }
        if(node.getPrimeiro() != null)
        {
            node.getPrimeiro().apply(this);
        }
        outAOperacaoExp(node);
    }

    public void inAOperacaologicaExp(AOperacaologicaExp node)
    {
        defaultIn(node);
    }

    public void outAOperacaologicaExp(AOperacaologicaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOperacaologicaExp(AOperacaologicaExp node)
    {
        inAOperacaologicaExp(node);
        if(node.getSegundo() != null)
        {
            node.getSegundo().apply(this);
        }
        if(node.getOperacaologica() != null)
        {
            node.getOperacaologica().apply(this);
        }
        if(node.getPrimeiro() != null)
        {
            node.getPrimeiro().apply(this);
        }
        outAOperacaologicaExp(node);
    }

    public void inANegativoExp(ANegativoExp node)
    {
        defaultIn(node);
    }

    public void outANegativoExp(ANegativoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegativoExp(ANegativoExp node)
    {
        inANegativoExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        outANegativoExp(node);
    }

    public void inANegadoExp(ANegadoExp node)
    {
        defaultIn(node);
    }

    public void outANegadoExp(ANegadoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegadoExp(ANegadoExp node)
    {
        inANegadoExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getNao() != null)
        {
            node.getNao().apply(this);
        }
        outANegadoExp(node);
    }

    public void inAInternoExp(AInternoExp node)
    {
        defaultIn(node);
    }

    public void outAInternoExp(AInternoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInternoExp(AInternoExp node)
    {
        inAInternoExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAInternoExp(node);
    }

    public void inANumeroExp(ANumeroExp node)
    {
        defaultIn(node);
    }

    public void outANumeroExp(ANumeroExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumeroExp(ANumeroExp node)
    {
        inANumeroExp(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outANumeroExp(node);
    }

    public void inARealExp(ARealExp node)
    {
        defaultIn(node);
    }

    public void outARealExp(ARealExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealExp(ARealExp node)
    {
        inARealExp(node);
        if(node.getNumeroReal() != null)
        {
            node.getNumeroReal().apply(this);
        }
        outARealExp(node);
    }

    public void inAVariavelExp(AVariavelExp node)
    {
        defaultIn(node);
    }

    public void outAVariavelExp(AVariavelExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelExp(AVariavelExp node)
    {
        inAVariavelExp(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVariavelExp(node);
    }

    public void inAIdVar(AIdVar node)
    {
        defaultIn(node);
    }

    public void outAIdVar(AIdVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVar(AIdVar node)
    {
        inAIdVar(node);
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAIdVar(node);
    }

    public void inAVetorVar(AVetorVar node)
    {
        defaultIn(node);
    }

    public void outAVetorVar(AVetorVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorVar(AVetorVar node)
    {
        inAVetorVar(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getIdentificador() != null)
        {
            node.getIdentificador().apply(this);
        }
        outAVetorVar(node);
    }

    public void inAAddOperacao(AAddOperacao node)
    {
        defaultIn(node);
    }

    public void outAAddOperacao(AAddOperacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddOperacao(AAddOperacao node)
    {
        inAAddOperacao(node);
        if(node.getMais() != null)
        {
            node.getMais().apply(this);
        }
        outAAddOperacao(node);
    }

    public void inASubOperacao(ASubOperacao node)
    {
        defaultIn(node);
    }

    public void outASubOperacao(ASubOperacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubOperacao(ASubOperacao node)
    {
        inASubOperacao(node);
        if(node.getMenos() != null)
        {
            node.getMenos().apply(this);
        }
        outASubOperacao(node);
    }

    public void inAMultOperacao(AMultOperacao node)
    {
        defaultIn(node);
    }

    public void outAMultOperacao(AMultOperacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultOperacao(AMultOperacao node)
    {
        inAMultOperacao(node);
        if(node.getVezes() != null)
        {
            node.getVezes().apply(this);
        }
        outAMultOperacao(node);
    }

    public void inADivOperacao(ADivOperacao node)
    {
        defaultIn(node);
    }

    public void outADivOperacao(ADivOperacao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivOperacao(ADivOperacao node)
    {
        inADivOperacao(node);
        if(node.getDivisao() != null)
        {
            node.getDivisao().apply(this);
        }
        outADivOperacao(node);
    }

    public void inAMenorigOperacaologica(AMenorigOperacaologica node)
    {
        defaultIn(node);
    }

    public void outAMenorigOperacaologica(AMenorigOperacaologica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorigOperacaologica(AMenorigOperacaologica node)
    {
        inAMenorigOperacaologica(node);
        if(node.getMenorigual() != null)
        {
            node.getMenorigual().apply(this);
        }
        outAMenorigOperacaologica(node);
    }

    public void inAMaiorigOperacaologica(AMaiorigOperacaologica node)
    {
        defaultIn(node);
    }

    public void outAMaiorigOperacaologica(AMaiorigOperacaologica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorigOperacaologica(AMaiorigOperacaologica node)
    {
        inAMaiorigOperacaologica(node);
        if(node.getMaiorigual() != null)
        {
            node.getMaiorigual().apply(this);
        }
        outAMaiorigOperacaologica(node);
    }

    public void inAMenorOperacaologica(AMenorOperacaologica node)
    {
        defaultIn(node);
    }

    public void outAMenorOperacaologica(AMenorOperacaologica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorOperacaologica(AMenorOperacaologica node)
    {
        inAMenorOperacaologica(node);
        if(node.getMenorq() != null)
        {
            node.getMenorq().apply(this);
        }
        outAMenorOperacaologica(node);
    }

    public void inAMaiorOperacaologica(AMaiorOperacaologica node)
    {
        defaultIn(node);
    }

    public void outAMaiorOperacaologica(AMaiorOperacaologica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorOperacaologica(AMaiorOperacaologica node)
    {
        inAMaiorOperacaologica(node);
        if(node.getMaiorq() != null)
        {
            node.getMaiorq().apply(this);
        }
        outAMaiorOperacaologica(node);
    }

    public void inAIgualOperacaologica(AIgualOperacaologica node)
    {
        defaultIn(node);
    }

    public void outAIgualOperacaologica(AIgualOperacaologica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualOperacaologica(AIgualOperacaologica node)
    {
        inAIgualOperacaologica(node);
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        outAIgualOperacaologica(node);
    }

    public void inADiffOperacaologica(ADiffOperacaologica node)
    {
        defaultIn(node);
    }

    public void outADiffOperacaologica(ADiffOperacaologica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiffOperacaologica(ADiffOperacaologica node)
    {
        inADiffOperacaologica(node);
        if(node.getDiferente() != null)
        {
            node.getDiferente().apply(this);
        }
        outADiffOperacaologica(node);
    }

    public void inAXorOperacaologica(AXorOperacaologica node)
    {
        defaultIn(node);
    }

    public void outAXorOperacaologica(AXorOperacaologica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorOperacaologica(AXorOperacaologica node)
    {
        inAXorOperacaologica(node);
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        outAXorOperacaologica(node);
    }

    public void inAOuOperacaologica(AOuOperacaologica node)
    {
        defaultIn(node);
    }

    public void outAOuOperacaologica(AOuOperacaologica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuOperacaologica(AOuOperacaologica node)
    {
        inAOuOperacaologica(node);
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        outAOuOperacaologica(node);
    }

    public void inAEOperacaologica(AEOperacaologica node)
    {
        defaultIn(node);
    }

    public void outAEOperacaologica(AEOperacaologica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEOperacaologica(AEOperacaologica node)
    {
        inAEOperacaologica(node);
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        outAEOperacaologica(node);
    }

    public void inASeComandoSe(ASeComandoSe node)
    {
        defaultIn(node);
    }

    public void outASeComandoSe(ASeComandoSe node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComandoSe(ASeComandoSe node)
    {
        inASeComandoSe(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outASeComandoSe(node);
    }

    public void inASeNaoComandoSe(ASeNaoComandoSe node)
    {
        defaultIn(node);
    }

    public void outASeNaoComandoSe(ASeNaoComandoSe node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeNaoComandoSe(ASeNaoComandoSe node)
    {
        inASeNaoComandoSe(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getSegundo());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outASeNaoComandoSe(node);
    }

    public void inAComandoRepita(AComandoRepita node)
    {
        defaultIn(node);
    }

    public void outAComandoRepita(AComandoRepita node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoRepita(AComandoRepita node)
    {
        inAComandoRepita(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        outAComandoRepita(node);
    }

    public void inAComandoEnquanto(AComandoEnquanto node)
    {
        defaultIn(node);
    }

    public void outAComandoEnquanto(AComandoEnquanto node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoEnquanto(AComandoEnquanto node)
    {
        inAComandoEnquanto(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAComandoEnquanto(node);
    }

    public void inACasos(ACasos node)
    {
        defaultIn(node);
    }

    public void outACasos(ACasos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACasos(ACasos node)
    {
        inACasos(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outACasos(node);
    }

    public void inANormalComandoAvalie(ANormalComandoAvalie node)
    {
        defaultIn(node);
    }

    public void outANormalComandoAvalie(ANormalComandoAvalie node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANormalComandoAvalie(ANormalComandoAvalie node)
    {
        inANormalComandoAvalie(node);
        {
            List<PCasos> copy = new ArrayList<PCasos>(node.getCasos());
            Collections.reverse(copy);
            for(PCasos e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outANormalComandoAvalie(node);
    }

    public void inASenaoComandoAvalie(ASenaoComandoAvalie node)
    {
        defaultIn(node);
    }

    public void outASenaoComandoAvalie(ASenaoComandoAvalie node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASenaoComandoAvalie(ASenaoComandoAvalie node)
    {
        inASenaoComandoAvalie(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PCasos> copy = new ArrayList<PCasos>(node.getCasos());
            Collections.reverse(copy);
            for(PCasos e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outASenaoComandoAvalie(node);
    }

    public void inANumTipospara(ANumTipospara node)
    {
        defaultIn(node);
    }

    public void outANumTipospara(ANumTipospara node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumTipospara(ANumTipospara node)
    {
        inANumTipospara(node);
        if(node.getNumero() != null)
        {
            node.getNumero().apply(this);
        }
        outANumTipospara(node);
    }

    public void inAVarTipospara(AVarTipospara node)
    {
        defaultIn(node);
    }

    public void outAVarTipospara(AVarTipospara node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarTipospara(AVarTipospara node)
    {
        inAVarTipospara(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarTipospara(node);
    }

    public void inASempassoComandoPara(ASempassoComandoPara node)
    {
        defaultIn(node);
    }

    public void outASempassoComandoPara(ASempassoComandoPara node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASempassoComandoPara(ASempassoComandoPara node)
    {
        inASempassoComandoPara(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSegundo() != null)
        {
            node.getSegundo().apply(this);
        }
        if(node.getTipospara() != null)
        {
            node.getTipospara().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outASempassoComandoPara(node);
    }

    public void inACompassoComandoPara(ACompassoComandoPara node)
    {
        defaultIn(node);
    }

    public void outACompassoComandoPara(ACompassoComandoPara node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompassoComandoPara(ACompassoComandoPara node)
    {
        inACompassoComandoPara(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getTerceiro() != null)
        {
            node.getTerceiro().apply(this);
        }
        if(node.getSegundo() != null)
        {
            node.getSegundo().apply(this);
        }
        if(node.getTipospara() != null)
        {
            node.getTipospara().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outACompassoComandoPara(node);
    }

    public void inANormalComandoEscrita(ANormalComandoEscrita node)
    {
        defaultIn(node);
    }

    public void outANormalComandoEscrita(ANormalComandoEscrita node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANormalComandoEscrita(ANormalComandoEscrita node)
    {
        inANormalComandoEscrita(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outANormalComandoEscrita(node);
    }

    public void inAStrComandoEscrita(AStrComandoEscrita node)
    {
        defaultIn(node);
    }

    public void outAStrComandoEscrita(AStrComandoEscrita node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStrComandoEscrita(AStrComandoEscrita node)
    {
        inAStrComandoEscrita(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStrComandoEscrita(node);
    }

    public void inAComandoLeia(AComandoLeia node)
    {
        defaultIn(node);
    }

    public void outAComandoLeia(AComandoLeia node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoLeia(AComandoLeia node)
    {
        inAComandoLeia(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAComandoLeia(node);
    }

    public void inAComandoAtribuicao(AComandoAtribuicao node)
    {
        defaultIn(node);
    }

    public void outAComandoAtribuicao(AComandoAtribuicao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoAtribuicao(AComandoAtribuicao node)
    {
        inAComandoAtribuicao(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAComandoAtribuicao(node);
    }

    public void inALeiaComando(ALeiaComando node)
    {
        defaultIn(node);
    }

    public void outALeiaComando(ALeiaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeiaComando(ALeiaComando node)
    {
        inALeiaComando(node);
        if(node.getComandoLeia() != null)
        {
            node.getComandoLeia().apply(this);
        }
        outALeiaComando(node);
    }

    public void inARepitaComando(ARepitaComando node)
    {
        defaultIn(node);
    }

    public void outARepitaComando(ARepitaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepitaComando(ARepitaComando node)
    {
        inARepitaComando(node);
        if(node.getComandoRepita() != null)
        {
            node.getComandoRepita().apply(this);
        }
        outARepitaComando(node);
    }

    public void inAEnquantoComando(AEnquantoComando node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComando(AEnquantoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComando(AEnquantoComando node)
    {
        inAEnquantoComando(node);
        if(node.getComandoEnquanto() != null)
        {
            node.getComandoEnquanto().apply(this);
        }
        outAEnquantoComando(node);
    }

    public void inAAvaliarComando(AAvaliarComando node)
    {
        defaultIn(node);
    }

    public void outAAvaliarComando(AAvaliarComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAvaliarComando(AAvaliarComando node)
    {
        inAAvaliarComando(node);
        if(node.getComandoAvalie() != null)
        {
            node.getComandoAvalie().apply(this);
        }
        outAAvaliarComando(node);
    }

    public void inAEscritaComando(AEscritaComando node)
    {
        defaultIn(node);
    }

    public void outAEscritaComando(AEscritaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEscritaComando(AEscritaComando node)
    {
        inAEscritaComando(node);
        if(node.getComandoEscrita() != null)
        {
            node.getComandoEscrita().apply(this);
        }
        outAEscritaComando(node);
    }

    public void inASeComando(ASeComando node)
    {
        defaultIn(node);
    }

    public void outASeComando(ASeComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComando(ASeComando node)
    {
        inASeComando(node);
        if(node.getComandoSe() != null)
        {
            node.getComandoSe().apply(this);
        }
        outASeComando(node);
    }

    public void inAAtribuicaoComando(AAtribuicaoComando node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoComando(AAtribuicaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoComando(AAtribuicaoComando node)
    {
        inAAtribuicaoComando(node);
        if(node.getComandoAtribuicao() != null)
        {
            node.getComandoAtribuicao().apply(this);
        }
        outAAtribuicaoComando(node);
    }

    public void inAParaComando(AParaComando node)
    {
        defaultIn(node);
    }

    public void outAParaComando(AParaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaComando(AParaComando node)
    {
        inAParaComando(node);
        if(node.getComandoPara() != null)
        {
            node.getComandoPara().apply(this);
        }
        outAParaComando(node);
    }
}
