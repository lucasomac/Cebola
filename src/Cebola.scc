/* 
	Filename   : Cebola.ssc
	Created on : 13/08/2018
	Description: Gramatica para a disciplina de Compiladores
*/

Helpers	
tudo = [0..0xffff];	
digito = ['0' .. '9'];	
letra = ['a' .. 'z'] | ['A' .. 'Z'];	
under = '_';	
simbolo = letra | under;	
hcomentario = '/''/' [tudo-10]* (10);	
 // Expressoes regulares	
 States	
normal, comentado;	
 Tokens	
//Operadores aritimeticos	
{normal} mais = '+';	
{normal} menos = '-';	
{normal} vezes = '*';	
{normal} divisao = '/';	
//Tipo de dados	
{normal} caractere = 'caractere';	
{normal} real = 'real';	
{normal} inteiro = 'inteiro';	
{normal} string = '''[tudo-''']*''';	
//Delimitadores	
{normal} ptvirg = ';';	
{normal} doispt = ':';	
{normal} virg = ',';	
{normal} apar = '(';	
{normal} fpar = ')';	
{normal} acol = '[';	
{normal} fcol = ']';	
{normal} aspa = ''';	
//Operadores relacionais	
{normal} maiorq = '>';	
{normal} menorq = '<';	
{normal} igual = '=';	
{normal} maiorigual = '>=';	
{normal} menorigual = '<=';	
{normal} diferente = '<>';	
//Palavras reservadas	
{normal} const = 'const';	
{normal} programa = 'programa';	
{normal} inicio = 'inicio';	
{normal} fim = 'fim.';	
{normal} ponto = '.';	
{normal} escreva = 'escreva';	
{normal} leia = 'leia';	
//Comandos	
{normal} se = 'se';	
{normal} entao = 'entao';	
{normal} senao = 'senao';	
{normal} fimse = 'fim se';	
{normal} repita = 'repita';	
{normal} enquanto = 'enquanto';	
{normal} fimenquanto = 'fim enquanto';	
{normal} para = 'para';	
{normal} de = 'de';	
{normal} ate = 'ate';	
{normal} faca = 'faca';	
{normal} fimpara = 'fim para';	
{normal} passo = 'passo';	
{normal} avalie = 'avalie';	
{normal} caso = 'caso';	
{normal} fimavalie = 'fim avalie';	
//Relacoes booleanas	
{normal} e = 'e';	
{normal} ou = 'ou';	
{normal} xor = 'xor';	
{normal} nao = 'nao';	
//Definicoes de numeros	
{normal} numero = digito+;	
{normal} numero_real = digito+','digito+;	
//Comentarios e branco	
{normal} comenlinha = hcomentario;	
{normal} lf = 10;	
{normal} espaco = ' '+ | '	'+;	
{normal} cr = 13;	
{normal->comentado, comentado} comentado = '/*';	
{comentado} comentadofinal = '*/';	
{comentado} corpo = [tudo -['*' + '/']]*;	
{comentado} estrela = '*';	
{comentado} barra = '/';	
//Atribuicao e identificacao	
{normal} atribuicao = ':=';	
{normal} identificador = simbolo (simbolo|digito)*;	
Ignored Tokens	
lf,	
espaco,	
comenlinha,	
cr,	
comentado;	
 //-------------------------------------------------	
// Gramatica da Sintaxe	
//-------------------------------------------------	
 Productions 	
 cebola = programa identificador inicio decl_var* comando* fim { -> New cebola (identificador, [decl_var], [comando])};	
 //declaracao de variaveis e corpo do programa---------------------	
 decl_var =  {variavel} tipo doispt decl_var_virg* varld ptvirg { -> New decl_var.variavel (tipo, [decl_var_virg.varld], varld)}	
					  |{dconstante}const identificador valor ptvirg { -> New decl_var.dconstante (identificador, valor)};	
					  	
decl_var_virg { -> varld } = varld virg { -> varld };	
  					  	
varld  = {simples} identificador  {-> New varld.simples (identificador)}	
	        | {vetor}identificador acol numero fcol {-> New varld.vetor(identificador,numero)};	
 tipo  = {caractere} caractere { -> New tipo.caractere (caractere) }	
	    | {inteiro} inteiro { -> New tipo.inteiro (inteiro) }	
	    | {real} real { -> New tipo.real (real) };	
	    	
valor = {string} string { -> New valor.string (string) }	
        |{numero} numero { -> New valor.numero (numero) }	
        |{real} numero_real { -> New valor.real (numero_real) }; 	
 exp = {numerico} expnum {-> expnum.exp} 	
     | {logica} exp_logica {-> exp_logica.exp};	
 //expessao numerica----------------------------------------------	
 expnum {-> exp} = {baixa} expnum soma termo {-> New exp.operacao(expnum.exp, soma.operacao, termo.exp)} 	
		|{termo} termo {-> termo.exp};	
			
soma {-> operacao}= {add} mais {-> New operacao.add(mais)}	
	  |{sub} menos {-> New operacao.sub(menos)};	
	 	
termo {-> exp} = {alta} termo mult fator {-> New exp.operacao(termo.exp, mult.operacao, fator.exp)} 	
	   			  |{fator} fator {-> fator.exp};	
	  	
mult {-> operacao} = {mult} vezes  {-> New operacao.mult(vezes)}	
	  |{div} divisao {-> New operacao.div(divisao)};	
fator {-> exp} =  {interno}apar expnum fpar {-> New exp.interno(expnum.exp)}	
		| {negativo} menos fator {-> New exp.negativo(menos, fator.exp)}	
		| {numero} numero {-> New exp.numero(numero)}	
		| {real} numero_real {-> New exp.real(numero_real)}
                
		| {variavel} var {-> New exp.variavel(var)};	
 //Operacoes logicas-----------------------------------------------	
parabool {-> operacaologica} = {menorig} menorigual {-> New operacaologica.menorig (menorigual)}	
                            |  {maiorig} maiorigual {-> New operacaologica.maiorig (maiorigual)}	
                            |  {menor} menorq {-> New operacaologica.menor (menorq)}	
                            |  {maior} maiorq {-> New operacaologica.maior (maiorq)};	
		 	
lcomp {-> operacaologica} = {igual} igual {-> New operacaologica.igual (igual)} 	
                           |{diff} diferente {-> New operacaologica.diff (diferente)};	
	   	
lsoma {-> operacaologica} = ou {-> New operacaologica.ou (ou)};	
lmult {-> operacaologica} = e  {-> New operacaologica.e (e)}; 	
lxor  {-> operacaologica} = xor {-> New operacaologica.xor (xor)};	

	
exp_logica {-> exp} = {conjunto} naoigualfator lcomp [segundo]: naoigualfator { -> New exp.operacaologica (naoigualfator.exp, lcomp.operacaologica, segundo.exp)}	
		   			 | {direto} lini { -> lini.exp};	
		   	
naoigualfator { -> exp } = {parenteses} apar exp_logica fpar { -> New exp.interno (exp_logica.exp)}	
			  			  | {exp} expnum parabool [segundo]: expnum { -> New exp.operacaologica (expnum.exp, parabool.operacaologica, segundo.exp)}	
						  | {nao} nao lfator { -> New exp.negado (nao, lfator.exp)};	
lini {-> exp} = {cadeia}lini lsoma lmeio { -> New exp.operacaologica (lini.exp, lsoma.operacaologica, lmeio.exp)}	
				  | {simples}lmeio { -> lmeio.exp};	
				  	
lmeio  {-> exp} = {cadeia}lmeio lxor ltermo { -> New exp.operacaologica (lmeio.exp, lxor.operacaologica, ltermo.exp)}	
				 | {simples}ltermo { -> ltermo.exp};	
				 	
ltermo {-> exp} = {cadeia} ltermo lmult lfator { -> New exp.operacaologica (ltermo.exp, lmult.operacaologica, lfator.exp)}	
				 | {simples}lfator { -> lfator.exp };	
				 	
lfator {-> exp} = {parenteses} apar exp_logica fpar { -> New exp.interno (exp_logica.exp)}	
				 | {exp} expnum parabool [segundo]: expnum { -> New exp.operacaologica (expnum.exp, parabool.operacaologica, segundo.exp)}	
				 | {expig} expnum lcomp [segundo]: expnum  { -> New exp.operacaologica (expnum.exp, lcomp.operacaologica, segundo.exp)}	
				 | {nao} nao lfator { -> New exp.negado (nao, lfator.exp)};	
 //comandos----------------------------------------------------	
     	
var = {id} identificador {-> New var.id(identificador)} 	
 | {vetor} identificador acol expnum fcol {-> New var.vetor(identificador, expnum.exp)};	
 comando =  {leia} comando_leia ptvirg { -> New comando.leia (comando_leia)}	
          | {repita} comando_repita ptvirg { -> New comando.repita (comando_repita)}	
          | {enquanto} comando_enquanto ptvirg { -> New comando.enquanto (comando_enquanto)}	
          | {avaliar} comando_avalie ptvirg { -> New comando.avaliar (comando_avalie)}	
          | {escrita} comando_escrita ptvirg { -> New comando.escrita (comando_escrita)}	
          | {se} comando_se ptvirg { -> New comando.se (comando_se)} 	
          | {atribuicao} comando_atribuicao ptvirg { -> New comando.atribuicao (comando_atribuicao)} 	
          | {para} comando_para ptvirg { -> New comando.para (comando_para)};	
		   	
comando_se = {se} se apar exp_logica fpar entao comando+ fimse {-> New comando_se.se(exp_logica.exp, [comando])}	
           | {se_nao} se apar exp_logica fpar entao comando+ senao [segundo]:comando+ fimse  {-> New comando_se.se_nao(exp_logica.exp, [comando], [segundo])};		   	
comando_repita = repita comando+ ate apar exp_logica fpar {-> New comando_repita([comando] ,exp_logica.exp )};	
 	
comando_enquanto = enquanto apar exp_logica fpar faca comando+ fimenquanto {-> New comando_enquanto(exp_logica.exp,[comando])};	
 casos = caso valor doispt comando+ {-> New casos(valor,[comando])};	
 comando_avalie = {normal} avalie apar exp fpar casos+ fimavalie {-> New comando_avalie.normal(exp, [casos])}	
                 |{senao} avalie apar exp fpar casos+ senao doispt comando+ fimavalie {-> New comando_avalie.senao(exp, [casos], [comando])};	
 tipospara = {num}numero {-> New tipospara.num(numero)} 	
           | {var}var  {-> New tipospara.var(var)};	
comando_para = {sempasso}para var de tipospara ate [segundo]: tipospara faca comando+ fimpara {-> New comando_para.sempasso(var, tipospara, segundo, [comando])}	
              |{compasso}para var de tipospara passo [segundo]: tipospara ate [terceiro]: tipospara faca comando+ fimpara {-> New comando_para.compasso(var, tipospara, segundo, terceiro, [comando])};	   	
	           	
comando_escrita = {normal}escreva apar exp fpar {-> New comando_escrita.normal(exp)} 	
                 |{str}escreva apar string fpar {-> New comando_escrita.str(string)};	
	     	 	 	
comando_leia = leia apar varios_leia* var fpar {-> New comando_leia(var)};
varios_leia = var virg;	
comando_atribuicao = {inteiro} var atribuicao expnum  {-> New comando_atribuicao(var,expnum.exp)}| {string}var atribuicao string{-> New comando_atribuicao(var,string)};	

 //-------------------------------------------------	
// Arvore de Sintaxe Abstrata	
//-------------------------------------------------	


 Abstract Syntax Tree	
 cebola = identificador decl_var* comando*;	
 decl_var = {variavel} tipo [primeiro]:varld* [segundo]:varld | {dconstante} identificador valor;	
 varld = {simples} identificador | {vetor} identificador numero;	
 tipo = {caractere} caractere | {inteiro} inteiro | {real} real;	
 valor = {string} string | {numero} numero | {real} numero_real;
	
 exp = {operacao} [primeiro]: exp operacao [segundo]: exp	  	
      |{operacaologica} [primeiro]: exp operacaologica [segundo]: exp	
      |{negativo} menos exp	
      |{negado} nao exp	
      |{interno} exp	
      |{numero} numero	
      |{real} numero_real
      
      |{variavel} var;	
	  	
var = {id} identificador	
     |{vetor} identificador exp;	
	  	
	  	
operacao = {add} mais	
	  |{sub} menos	
	  |{mult} vezes	
          |{div} divisao;	
	  			
operacaologica =  {menorig} menorigual 	
		| {maiorig} maiorigual 	
                | {menor} menorq 	
                | {maior} maiorq 	
                | {igual} igual 	
                | {diff} diferente 	
		| {xor} xor	
                | {ou} ou 	
                | {e} e; 	
			   	
			   	
comando_se = {se} exp comando* 	
           | {se_nao} exp comando* [segundo]:comando+;		   	
 comando_repita = comando+ exp;	
 	
comando_enquanto = exp comando*;	
 casos =  valor comando*;	
 comando_avalie =   {normal}exp casos*	
				 |  {senao} exp casos* comando*;	
 tipospara = {num} numero 	
           | {var} var;	
 comando_para = {sempasso} var  tipospara [segundo]: tipospara comando+	
              | {compasso} var  tipospara [segundo]: tipospara [terceiro]: tipospara comando+;	   	
	           	
comando_escrita = {normal} exp	
		| {str} string;	
	     	 	 	
comando_leia = var;	
comando_atribuicao = {inteiro}var exp | {string}var string;			   	
			   			   			   			   			       	
			   	
comando =  {leia} comando_leia 	
	 | {repita} comando_repita  	
	 | {enquanto} comando_enquanto 	
	 | {avaliar} comando_avalie  	
	 | {escrita} comando_escrita  	
	 | {se} comando_se  	
	 | {atribuicao} comando_atribuicao  	
	 | {para} comando_para ;
